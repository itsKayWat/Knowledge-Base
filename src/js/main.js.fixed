// Global variables
let books = new Map();
let bookCategories = new Map();
let selectedBookId = null;
let contentContainer = null;
let contentTitle = null;

// When DOM is loaded 
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded, initializing Knowledge Base...");
    
    // Set references to important DOM elements
    contentContainer = document.querySelector('.main-content');
    contentTitle = document.querySelector('.selected-workspace-name');
    
    // Initialize the extension
    init();
    
    // Setup sidebar navigation
    setupSidebarNavigation();
});

// Initialize the extension
function init() {
    console.log("Initializing Knowledge Base...");
    
    try {
        // First, inject tree styles
        console.log("Injecting tree styles...");
        injectTreeStyles();
        
        // Force reset data to ensure correct category structure
        // Only do this the first time after updating to the new version
        const structureFixed = localStorage.getItem('category_structure_fixed');
        if (!structureFixed) {
            resetData();
            localStorage.setItem('category_structure_fixed', 'true');
        } else {
            // Load existing data for returning users who already have the fixed structure
        console.log("Loading existing data...");
        loadData();
        
        // Create demo data if needed - this function checks if demo data exists
        console.log("Checking for demo data...");
        createDemoDataIfNeeded();
        }
        
        // Setup event listeners
        console.log("Setting up event listeners...");
        setupEventListeners();
        
        // Initialize filter system
        console.log("Initializing filter system...");
        initializeFilterSystem();
        
        // Update sidebar with books
        console.log("Updating books sidebar...");
        updateBooksSidebar();
        
        // Show My Books page initially
        console.log("Showing My Books page...");
        if (contentContainer) {
            showMyBooksPage();
            console.log("My Books page displayed.");
        } else {
            console.error("Content container not found!");
        }
        
        console.log("Initialization complete!");
    } catch (error) {
        console.error("Error during initialization:", error);
    }
}

// Setup all event listeners
function setupEventListeners() {
    console.log("Setting up event listeners");
    
    // Setup search functionality
    const searchInputs = document.querySelectorAll('.search-input');
    searchInputs.forEach(searchInput => {
        searchInput.addEventListener('input', function(e) {
            const query = e.target.value.toLowerCase();
            filterContent(query);
        });
    });
    
    // Setup filter tabs
    const filterItems = document.querySelectorAll('.filter-item');
    filterItems.forEach(item => {
        item.addEventListener('click', function() {
            const filter = this.getAttribute('data-filter');
            
            // Update active class
            document.querySelectorAll('.filter-item').forEach(i => i.classList.remove('active'));
            this.classList.add('active');
            
            // Apply filter
            filterByType(filter);
        });
    });

    // Add content button in main content
    const addContentBtn = document.querySelector('.btn-add');
    if (addContentBtn) {
        addContentBtn.addEventListener('click', function(event) {
            showAddNewMenu(this);
            event.stopPropagation();
        });
    }

    // URL Copy Button
    const copyUrlBtn = document.getElementById('copy-url-button');
    if (copyUrlBtn) {
        copyUrlBtn.addEventListener('click', function() {
            const url = document.getElementById('kb-current-url').textContent;
            navigator.clipboard.writeText(url).then(() => {
                showNotification('URL copied to clipboard', 'success');
            });
        });
    }
    
    // Setup context menu for books in sidebar
    setupContextMenuListeners();
    
    // Setup sidebar icon navigation
    setupSidebarNavigation();
    
    // Setup profile menu functionality
    setupProfileEventListeners();
    
    // Setup navigation listeners
    setupTreeEventListeners();
    setupNavEventListeners();
    setupSidebarEventListeners();
}

// Set up sidebar navigation for Analytics and Settings
function setupSidebarNavigation() {
    // Get the sidebar icons
    const booksIcon = document.querySelector('.icon-link[title="My Books"]');
    const analyticsIcon = document.querySelector('.icon-link[title="Analytics"]');
    const adminIcon = document.querySelector('.icon-link[title="Admin"]');
    const teamIcon = document.querySelector('.icon-link[title="Team"]');
    const settingsIcon = document.querySelector('.icon-link[title="Settings"]');
    
    // Add event listeners to the icons
    if (booksIcon) {
        booksIcon.addEventListener('click', function(e) {
            e.preventDefault();
            // Update active state
            document.querySelectorAll('.icon-link').forEach(icon => {
                icon.classList.remove('active');
            });
            this.classList.add('active');
            // Show the books page
            showMyBooksPage();
        });
    }
    
    if (analyticsIcon) {
        analyticsIcon.addEventListener('click', function(e) {
            e.preventDefault();
            // Update active state
            document.querySelectorAll('.icon-link').forEach(icon => {
                icon.classList.remove('active');
            });
            this.classList.add('active');
            // Show the analytics page
            showAnalyticsPage();
        });
    }
    
    if (adminIcon) {
        adminIcon.addEventListener('click', function(e) {
            e.preventDefault();
            // Update active state
            document.querySelectorAll('.icon-link').forEach(icon => {
                icon.classList.remove('active');
            });
            this.classList.add('active');
            // Show the admin page
            showAdminPage();
        });
    }
    
    if (teamIcon) {
        teamIcon.addEventListener('click', function(e) {
            e.preventDefault();
            // Update active state
            document.querySelectorAll('.icon-link').forEach(icon => {
                icon.classList.remove('active');
            });
            this.classList.add('active');
            // Show the team page
            showTeamPage();
        });
    }
    
    if (settingsIcon) {
        settingsIcon.addEventListener('click', function(e) {
            e.preventDefault();
            // Update active state
            document.querySelectorAll('.icon-link').forEach(icon => {
                icon.classList.remove('active');
            });
            this.classList.add('active');
            // Show the settings page
            showSettingsPage();
        });
    }
}

// Setup context menu listeners for books and content items
function setupContextMenuListeners() {
    // Handle context menu closing
    document.addEventListener('click', hideContextMenu);
    window.addEventListener('scroll', hideContextMenu);
    window.addEventListener('resize', hideContextMenu);
    
    // Setup context menu for books in sidebar
    const booksList = document.querySelector('.books-list');
    if (booksList) {
        booksList.addEventListener('contextmenu', handleBookContextMenu);
    }
    
    // Setup context menu for content items
    const contentTable = document.querySelector('.content-table tbody');
    if (contentTable) {
        contentTable.addEventListener('contextmenu', handleContentContextMenu);
    }
}

// Handle context menu for books
function handleBookContextMenu(event) {
    const bookItem = event.target.closest('.book-item');
    if (!bookItem) return; // Not clicking on a book item
    
    event.preventDefault(); // Prevent default context menu
    
    const bookId = bookItem.getAttribute('data-book-id');
    if (!bookId) return;
    
    // Create and show context menu for books
    showContextMenu(event, [
        {
            label: 'Edit Book',
            icon: 'edit',
            action: () => editBook(bookId)
        },
        {
            label: 'Clone Book',
            icon: 'copy',
            action: () => cloneBook(bookId)
        },
        {
            label: 'Delete Book',
            icon: 'trash',
            action: () => deleteBook(bookId)
        }
    ]);
}

// Handle context menu for content items
function handleContentContextMenu(event) {
    const row = event.target.closest('tr');
    if (!row) return; // Not clicking on a row
    
    event.preventDefault(); // Prevent default context menu
    
    const itemId = row.getAttribute('data-id');
    if (!itemId) return;
    
    // Determine item type based on row class
    const itemType = getItemTypeFromRow(row);
    
    // Create context menu items based on type
    const menuItems = [
        {
            label: `Edit ${capitalizeFirstLetter(itemType)}`,
            icon: 'edit',
            action: () => editItem(itemId, row)
        },
        {
            label: `Clone ${capitalizeFirstLetter(itemType)}`,
            icon: 'copy',
            action: () => cloneItem(itemId, row)
        },
        {
            label: `Delete ${capitalizeFirstLetter(itemType)}`,
            icon: 'trash',
            action: () => deleteItem(itemId, row)
        }
    ];
    
    showContextMenu(event, menuItems);
}

// Determine item type from row class
function getItemTypeFromRow(row) {
    if (row.classList.contains('category-row')) return 'category';
    if (row.classList.contains('folder-row')) return 'folder';
    if (row.classList.contains('article-row')) return 'article';
    if (row.classList.contains('file-row')) return 'file';
    return 'item';
}

// Function to create and show context menu
function showContextMenu(event, menuItems) {
    // Remove any existing context menu
    hideContextMenu();
    
    // Create context menu element
    const contextMenu = document.createElement('div');
    contextMenu.className = 'context-menu';
    contextMenu.style.position = 'fixed';
    contextMenu.style.zIndex = '1000';
    contextMenu.style.backgroundColor = 'var(--card-color)';
    contextMenu.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.3)';
    contextMenu.style.borderRadius = '8px';
    contextMenu.style.border = '1px solid var(--border-color)';
    contextMenu.style.padding = '6px 0';
    contextMenu.style.minWidth = '180px';
    contextMenu.id = 'kb-context-menu';
    
    // Add menu items
    menuItems.forEach((item, index) => {
        const menuItem = document.createElement('div');
        menuItem.className = 'context-menu-item';
        menuItem.style.padding = '8px 12px';
        menuItem.style.cursor = 'pointer';
        menuItem.style.display = 'flex';
        menuItem.style.alignItems = 'center';
        menuItem.style.gap = '8px';
        menuItem.style.fontSize = '14px';
        menuItem.style.color = 'var(--text-color)';
        menuItem.style.transition = 'background-color 0.2s';
        
        // Icon
        const icon = getIconForAction(item.icon);
        
        // Label
        menuItem.innerHTML = `${icon} ${item.label}`;
        
        // Hover effect
        menuItem.addEventListener('mouseenter', () => {
            menuItem.style.backgroundColor = 'var(--hover-color)';
        });
        menuItem.addEventListener('mouseleave', () => {
            menuItem.style.backgroundColor = 'transparent';
        });
        
        // Click handler
        menuItem.addEventListener('click', () => {
            item.action();
            hideContextMenu();
        });
        
        contextMenu.appendChild(menuItem);
        
        // Add separator if specified or between delete and other actions
        if (item.separator || (index < menuItems.length - 1 && menuItems[index + 1].icon === 'trash')) {
            const separator = document.createElement('div');
            separator.style.height = '1px';
            separator.style.backgroundColor = 'var(--border-color)';
            separator.style.margin = '4px 0';
            contextMenu.appendChild(separator);
        }
    });
    
    // Add to DOM
    document.body.appendChild(contextMenu);
    
    // Position menu at cursor
    positionContextMenu(event, contextMenu);
}

// Position the context menu
function positionContextMenu(event, contextMenu) {
    const x = event.clientX;
    const y = event.clientY;
    
    // Get viewport and menu dimensions
    const menuWidth = contextMenu.offsetWidth;
    const menuHeight = contextMenu.offsetHeight;
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    // Position the menu, adjusting if it would go off-screen
    if (x + menuWidth > windowWidth) {
        contextMenu.style.left = (x - menuWidth) + 'px';
    } else {
        contextMenu.style.left = x + 'px';
    }
    
    if (y + menuHeight > windowHeight) {
        contextMenu.style.top = (y - menuHeight) + 'px';
    } else {
        contextMenu.style.top = y + 'px';
    }
}

// Function to hide context menu
function hideContextMenu() {
    const existingMenu = document.getElementById('kb-context-menu');
    if (existingMenu) {
        existingMenu.remove();
    }
}

// Helper function to capitalize first letter
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

// Function to get icon SVG for context menu
function getIconForAction(iconName) {
    const icons = {
        edit: `<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
        </svg>`,
        copy: `<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>`,
        trash: `<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="#ff4444" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="3 6 5 6 21 6"></polyline>
            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
        </svg>`
    };
    
    return icons[iconName] || '';
}

// Function to clone a book
function cloneBook(bookId) {
    if (!books.has(bookId)) {
        showNotification('Book not found', 'error');
        return;
    }
    
    const originalBook = books.get(bookId);
    const newBookId = 'book-' + Date.now();
    
    // Clone book properties
    const newBook = {
        id: newBookId,
        name: `${originalBook.name} (Copy)`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    // Add to books
    books.set(newBookId, newBook);
    
    // Check if the original book has categories
    if (bookCategories.has(bookId)) {
        const originalCategories = bookCategories.get(bookId);
        const newCategories = new Map();
        
        // Create a mapping of old IDs to new IDs for relationships
        const idMapping = new Map();
        
        // First pass: create new items with new IDs
        originalCategories.forEach((item, oldId) => {
            const newId = `${item.type}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
            idMapping.set(oldId, newId);
            
            // Clone the item with new ID
            const newItem = { ...item, id: newId, bookId: newBookId };
            newCategories.set(newId, newItem);
        });
        
        // Second pass: update parent/child relationships
        newCategories.forEach(item => {
            if (item.parentId && idMapping.has(item.parentId)) {
                item.parentId = idMapping.get(item.parentId);
            }
        });
        
        // Add to bookCategories
        bookCategories.set(newBookId, newCategories);
    } else {
        // Initialize empty categories for the new book
        bookCategories.set(newBookId, new Map());
    }
    
    // Save data
    saveData();
    
    // Update UI
    updateBooksSidebar();
    showNotification('Book cloned successfully!');
}

// Function to edit book name
function editBook(bookId) {
    if (!books.has(bookId)) {
        showNotification('Book not found', 'error');
        return;
    }
    
    const book = books.get(bookId);
    
    // Create modal for book editing
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modal.style.zIndex = '1000';
    modal.style.display = 'flex';
    modal.style.alignItems = 'center';
    modal.style.justifyContent = 'center';
    
    // Modal content
    modal.innerHTML = `
        <div style="background-color: var(--card-color); border-radius: 8px; width: 500px; max-width: 90%; padding: 20px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);">
            <h2 style="margin-top: 0; margin-bottom: 20px; font-size: 20px;">Edit Book</h2>
            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-size: 14px;">Book Name</label>
                <input type="text" id="book-name-input" value="${book.name}" style="width: 100%; padding: 10px; border-radius: 4px; border: 1px solid var(--border-color); background-color: rgba(255, 255, 255, 0.05); color: var(--text-color);">
            </div>
            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-size: 14px;">Description (optional)</label>
                <textarea id="book-description-input" placeholder="Enter book description" rows="4" style="width: 100%; padding: 10px; border-radius: 4px; border: 1px solid var(--border-color); background-color: rgba(255, 255, 255, 0.05); color: var(--text-color); resize: vertical;">${book.description || ''}</textarea>
            </div>
            <div style="display: flex; justify-content: flex-end; gap: 10px;">
                <button id="cancel-book-edit" class="btn btn-outline">Cancel</button>
                <button id="save-book-edit" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listeners
    document.getElementById('cancel-book-edit').addEventListener('click', () => {
        modal.remove();
    });
    
    document.getElementById('save-book-edit').addEventListener('click', () => {
        const bookName = document.getElementById('book-name-input').value.trim();
        const bookDescription = document.getElementById('book-description-input').value.trim();
        
        if (bookName === '') {
            showNotification('Please enter a book name', 'error');
            return;
        }
        
        // Update book
        book.name = bookName;
        book.description = bookDescription;
        book.updatedAt = new Date().toISOString();
        
        // Save data
        saveData();
        
        // Update UI
        updateBooksSidebar();
        showMyBooksPage();
        showNotification('Book updated successfully!');
        
        // Remove modal
        modal.remove();
    });
    
    // Focus the input field
    setTimeout(() => {
        document.getElementById('book-name-input').focus();
    }, 100);
}

// Function to delete a book
function deleteBook(bookId) {
    if (!books.has(bookId)) {
        showNotification('Book not found', 'error');
        return;
    }
    
    const book = books.get(bookId);
    
    // Create a confirmation modal
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modal.style.zIndex = '1000';
    modal.style.display = 'flex';
    modal.style.alignItems = 'center';
    modal.style.justifyContent = 'center';
    
    // Modal content
    modal.innerHTML = `
        <div style="background-color: var(--card-color); border-radius: 8px; width: 500px; max-width: 90%; padding: 20px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);">
            <h2 style="margin-top: 0; margin-bottom: 20px; font-size: 20px;">Delete Book</h2>
            <p style="margin-bottom: 20px;">Are you sure you want to delete "${book.name}"? This action cannot be undone.</p>
            <div style="display: flex; justify-content: flex-end; gap: 10px;">
                <button id="cancel-delete" class="btn btn-outline">Cancel</button>
                <button id="confirm-delete" class="btn btn-primary" style="background-color: #f44336;">Delete</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listeners
    document.getElementById('cancel-delete').addEventListener('click', () => {
        modal.remove();
    });
    
    document.getElementById('confirm-delete').addEventListener('click', () => {
        // Delete from books map
        books.delete(bookId);
        
        // Delete associated categories
        bookCategories.delete(bookId);
        
        // If the deleted book was selected, clear selection
        if (selectedBookId === bookId) {
            selectedBookId = null;
            localStorage.removeItem('selectedBookId');
            
            // If there are other books, select the first one
            if (books.size > 0) {
                selectedBookId = books.keys().next().value;
                localStorage.setItem('selectedBookId', selectedBookId);
            }
        }
        
        // Save data
        saveData();
        
        // Update UI
        updateBooksSidebar();
        showMyBooksPage();
        showNotification('Book deleted successfully');
        
        // Remove modal
        modal.remove();
    });
}

// Function to clone any content item (category, folder, article, file)
function cloneItem(itemId, row) {
    if (!selectedBookId || !itemId) {
        showNotification('Cannot clone item: no book or item selected', 'error');
        return;
    }
    
    const categories = bookCategories.get(selectedBookId);
    if (!categories || !categories.has(itemId)) {
        showNotification('Item not found', 'error');
        return;
    }
    
    const originalItem = categories.get(itemId);
    const itemType = originalItem.type;
    
    // Create new ID for the cloned item
    const newId = `${itemType}-${Date.now()}`;
    
    // Clone the item with a new ID
    const newItem = {
        ...originalItem,
        id: newId,
        name: `${originalItem.name} (Copy)`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    // Add to categories
    categories.set(newId, newItem);
    
    // Save data
    saveData();
    
    // Refresh the view
    showMyBooksPage();
    
    // Show notification
    showNotification(`${capitalizeFirstLetter(itemType)} cloned successfully!`);
}

// Function to load data from localStorage
function loadData() {
    console.log('Loading data from localStorage...');
    
    try {
        // Load books
        const storedBooks = localStorage.getItem('kb_books');
        if (storedBooks) {
            console.log('Found stored books data');
            const parsedBooks = JSON.parse(storedBooks);
            console.log('Parsed books data:', parsedBooks);
            
            // Convert to Map based on the structure of the data
            if (Array.isArray(parsedBooks)) {
                // If books is a regular array of objects
                books = new Map();
                parsedBooks.forEach(book => {
                    if (book && book.id) {
                        books.set(book.id, book);
                    }
                });
                console.log('Converted books array to Map with size:', books.size);
            } else if (Array.isArray(Object.entries(parsedBooks)[0])) {
                // If books is an array of key-value pairs
                books = new Map(parsedBooks);
                console.log('Created books Map directly from key-value pairs, size:', books.size);
            } else {
                // If books is an object
                books = new Map();
                Object.entries(parsedBooks).forEach(([key, value]) => {
                    books.set(key, value);
                });
                console.log('Converted books object to Map with size:', books.size);
            }
        } else {
            console.log('No stored books found, initializing empty Map');
            books = new Map();
        }
        
        // Load categories, articles, folders and files
        const storedCategories = localStorage.getItem('kb_categories');
        if (storedCategories) {
            console.log('Found stored categories data');
            const parsedCategories = JSON.parse(storedCategories);
            console.log('Parsed categories data type:', Array.isArray(parsedCategories) ? 'Array' : typeof parsedCategories);
            
            // Convert the nested structure back to Maps
            bookCategories = new Map();
            
            try {
                // Handle both formats: array of entries and nested object
                if (Array.isArray(parsedCategories)) {
                    parsedCategories.forEach(entry => {
                        if (Array.isArray(entry) && entry.length === 2) {
                            const [bookId, categoryEntries] = entry;
                            const categoryMap = new Map();
                            
                            if (Array.isArray(categoryEntries)) {
                                categoryEntries.forEach(catEntry => {
                                    if (Array.isArray(catEntry) && catEntry.length === 2) {
                                        categoryMap.set(catEntry[0], catEntry[1]);
                                    } else if (catEntry && catEntry.id) {
                                        categoryMap.set(catEntry.id, catEntry);
                                    }
                                });
                            }
                            
                            bookCategories.set(bookId, categoryMap);
                        }
                    });
                } else if (typeof parsedCategories === 'object') {
                    Object.entries(parsedCategories).forEach(([bookId, categories]) => {
                        const categoryMap = new Map();
                        
                        if (typeof categories === 'object') {
                            Object.entries(categories).forEach(([catId, catData]) => {
                                categoryMap.set(catId, catData);
                            });
                        }
                        
                        bookCategories.set(bookId, categoryMap);
                    });
                }
                console.log('Converted categories data to nested Maps with size:', bookCategories.size);
            } catch (err) {
                console.error('Error parsing category structure:', err);
                bookCategories = new Map();
            }
        } else {
            console.log('No stored categories found, initializing empty Map');
            bookCategories = new Map();
        }
        
        // Load selected book ID
        selectedBookId = localStorage.getItem('selectedBookId');
        console.log('Selected book ID:', selectedBookId);
        
        // If no data was loaded, create demo data
        if (books.size === 0) {
            console.log('No books found, creating demo data...');
            createDemoData();
        }
        
        console.log('Data loaded successfully');
    } catch (error) {
        console.error('Error loading data:', error);
        // If there's an error, reset the data
        books = new Map();
        bookCategories = new Map();
        // Create emergency demo data
        createDemoData();
    }
}

// Function to save data to localStorage
function saveData() {
    try {
        // Save books - convert to array of values
        localStorage.setItem('kb_books', JSON.stringify(Array.from(books.values())));
        
        // Save categories - convert Map of Maps to serializable format
        const serializedCategories = Array.from(bookCategories.entries()).map(([bookId, catMap]) => {
            return [bookId, Array.from(catMap.entries())];
        });
        localStorage.setItem('kb_categories', JSON.stringify(serializedCategories));
        
        // Save selected book ID
        if (selectedBookId) {
            localStorage.setItem('selectedBookId', selectedBookId);
        }
    } catch (error) {
        console.error('Error saving data:', error);
        showNotification('Failed to save data. Please try again.', 'error');
    }
}

// Function to create demo data
function createDemoData() {
    // Create demo books
    const guideBookId = 'book-demo-guide';
    const projectBookId = 'book-demo-project';
    
    books.set(guideBookId, {
        id: guideBookId,
        name: 'Knowledge Base Guide',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    books.set(projectBookId, {
        id: projectBookId,
        name: 'Project Documentation',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Create categories, folders, articles for Guide book
    const guideCategories = new Map();
    
    // All categories should be top-level (not nested within other categories)
    
    // Getting Started Category
    const gettingStartedId = 'category-demo-getting-started';
    guideCategories.set(gettingStartedId, {
        id: gettingStartedId,
        name: 'Getting Started',
        type: 'category',
        bookId: guideBookId,
        parentId: null, // Top level category, not nested
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        autoExpand: true
    });
    
    // Welcome article
    const welcomeArticleId = 'article-demo-welcome';
    guideCategories.set(welcomeArticleId, {
        id: welcomeArticleId,
        name: 'See what KnowledgeBase can do for you',
        type: 'article',
        parentId: gettingStartedId,
        bookId: guideBookId,
        status: 'published',
        content: `<h1>Welcome to Knowledge Base!</h1>
                  <p>This is your personal knowledge management tool. Here you can organize all your notes, documents, and resources in one place.</p>
                  <p>Get started by exploring the demo content or creating your own books and categories.</p>`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // How to Use article
    const howToUseId = 'article-demo-how-to-use';
    guideCategories.set(howToUseId, {
        id: howToUseId,
        name: 'Step 1: Create & publish articles',
        type: 'article',
        parentId: gettingStartedId,
        bookId: guideBookId,
        status: 'published',
        content: `<h1>How to Use Knowledge Base</h1>
                  <p>Knowledge Base is organized into a hierarchy of:</p>
                  <ul>
                    <li><strong>Books</strong>: Top-level collections</li>
                    <li><strong>Categories</strong>: Major sections within a book</li>
                    <li><strong>Folders</strong>: Organizational units for related content</li>
                    <li><strong>Articles</strong>: Individual documents with rich text</li>
                    <li><strong>Files</strong>: Uploaded resources like PDFs, images, etc.</li>
                  </ul>
                  <p>Use the sidebar to navigate between books, and the "Add new" button to create content.</p>`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // General Category 
    const generalId = 'category-demo-general';
    guideCategories.set(generalId, {
        id: generalId,
        name: 'General',
        type: 'category',
        bookId: guideBookId,
        parentId: null, // Top level category, not nested
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // FAQ Category
    const faqId = 'category-demo-faq';
    guideCategories.set(faqId, {
        id: faqId,
        name: 'FAQ',
        type: 'category',
        bookId: guideBookId,
        parentId: null, // Top level category, not nested
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Create an FAQ article
    const faqArticleId = 'article-demo-faq-article';
    guideCategories.set(faqArticleId, {
        id: faqArticleId,
        name: 'FAQ',
        type: 'article',
        parentId: faqId,
        bookId: guideBookId,
        status: 'published',
        content: `<h1>Frequently Asked Questions</h1>
                  <p>This is a sample FAQ article. Add your own questions and answers here.</p>`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Create categories for Project book
    const projectCategories = new Map();
    
    // Overview Category
    const overviewId = 'category-demo-overview';
    projectCategories.set(overviewId, {
        id: overviewId,
        name: 'Project Overview',
        type: 'category',
        bookId: projectBookId,
        parentId: null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        autoExpand: true
    });
    
    // Project Description article
    const projectDescId = 'article-demo-project-desc';
    projectCategories.set(projectDescId, {
        id: projectDescId,
        name: 'Project Description',
        type: 'article',
        parentId: overviewId,
        bookId: projectBookId,
        status: 'published',
        content: `<h1>Project Description</h1>
                  <p>This is a sample project documentation book. In a real project, you would describe your project goals, scope, and timeline here.</p>`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Technical Specs Category
    const techSpecsId = 'category-demo-tech-specs';
    projectCategories.set(techSpecsId, {
        id: techSpecsId,
        name: 'Technical Specifications',
        type: 'category',
        bookId: projectBookId,
        parentId: null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Architecture folder
    const architectureId = 'folder-demo-architecture';
    projectCategories.set(architectureId, {
        id: architectureId,
        name: 'Architecture',
        type: 'folder',
        parentId: techSpecsId,
        bookId: projectBookId,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // System Design article
    const systemDesignId = 'article-demo-system-design';
    projectCategories.set(systemDesignId, {
        id: systemDesignId,
        name: 'System Design',
        type: 'article',
        parentId: architectureId,
        bookId: projectBookId,
        status: 'draft',
        content: `<h1>System Design</h1>
                  <p>This document would contain technical details about the system architecture, components, and their interactions.</p>
                  <p><em>Note: This article is in draft status. It needs to be reviewed before publishing.</em></p>`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Add categories to bookCategories map
    bookCategories.set(guideBookId, guideCategories);
    bookCategories.set(projectBookId, projectCategories);
    
    // Set selected book
    selectedBookId = guideBookId;
    localStorage.setItem('selectedBookId', guideBookId);
    
    // Save all data
    saveData();
    
    // Mark demo content as created
    localStorage.setItem('demoContentCreated', 'true');
}

// Function to add a new book
function addNewBook() {
    console.log('addNewBook function called');
    
    // Create modal for book creation
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modal.style.zIndex = '1000';
    modal.style.display = 'flex';
    modal.style.alignItems = 'center';
    modal.style.justifyContent = 'center';
    
    // Modal content
    modal.innerHTML = `
        <div style="background-color: var(--card-color); border-radius: 8px; width: 500px; max-width: 90%; padding: 20px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);">
            <h2 style="margin-top: 0; margin-bottom: 20px; font-size: 20px;">New Book</h2>
            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-size: 14px;">Book Name</label>
                <input type="text" id="book-name-input" placeholder="Enter book name" style="width: 100%; padding: 10px; border-radius: 4px; border: 1px solid var(--border-color); background-color: rgba(255, 255, 255, 0.05); color: var(--text-color);">
            </div>
            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-size: 14px;">Description (optional)</label>
                <textarea id="book-description-input" placeholder="Enter book description" rows="4" style="width: 100%; padding: 10px; border-radius: 4px; border: 1px solid var(--border-color); background-color: rgba(255, 255, 255, 0.05); color: var(--text-color); resize: vertical;"></textarea>
            </div>
            <div style="display: flex; justify-content: flex-end; gap: 10px;">
                <button id="cancel-book" class="btn btn-outline">Cancel</button>
                <button id="create-book" class="btn btn-primary">Create Book</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listeners
    document.getElementById('cancel-book').addEventListener('click', () => {
        modal.remove();
    });
    
    document.getElementById('create-book').addEventListener('click', () => {
        const bookName = document.getElementById('book-name-input').value.trim();
        const bookDescription = document.getElementById('book-description-input').value.trim();
        
        if (bookName === '') {
            showNotification('Please enter a book name', 'error');
            return;
        }
        
        const bookId = 'book-' + Date.now();
        console.log('Generated new book ID:', bookId);
        
        const newBook = {
            id: bookId,
            name: bookName,
            description: bookDescription,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        
        // Add book to books map
        console.log('Adding book to books map...');
        books.set(bookId, newBook);
        console.log('Books map after adding:', [...books.entries()]);
        
        // Initialize empty categories for this book
        console.log('Initializing empty categories for book...');
        bookCategories.set(bookId, new Map());
        
        // Save data
        console.log('Saving data...');
        saveData();
        
        // Select the new book
        console.log('Selecting new book...');
        selectBook(bookId);
        
        // Show notification
        console.log('Showing success notification...');
        showNotification('Book created successfully!');
        
        // Update the sidebar with the new book
        console.log('Updating books sidebar...');
        updateBooksSidebar();
        
        console.log('addNewBook function completed successfully');
        
        // Remove modal
        modal.remove();
    });
    
    // Focus the input field
    setTimeout(() => {
        document.getElementById('book-name-input').focus();
    }, 100);
}

// Function to add a new category
function addNewCategory(bookId = selectedBookId) {
    // Get books from the current filter
    let booksToShow = [];
    if (selectedFilterCategory === 'all-books') {
        // Show all books
        booksToShow = Array.from(books.values());
    } else if (bookFilters.has(selectedFilterCategory)) {
        // Show only books in the selected filter
        booksToShow = bookFilters.get(selectedFilterCategory);
    }
    
    // Check if there are any books in the current filter
    if (booksToShow.length === 0) {
        showNotification(`The "${selectedFilterCategory}" filter has no books. Please create a book first or select a filter that contains books.`, 'error');
        return;
    }
    
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    modalOverlay.style.position = 'fixed';
    modalOverlay.style.top = '0';
    modalOverlay.style.left = '0';
    modalOverlay.style.width = '100%';
    modalOverlay.style.height = '100%';
    modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modalOverlay.style.zIndex = '1000';
    modalOverlay.style.display = 'flex';
    modalOverlay.style.alignItems = 'center';
    modalOverlay.style.justifyContent = 'center';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    modalContent.style.backgroundColor = 'var(--card-color)';
    modalContent.style.borderRadius = 'var(--border-radius)';
    modalContent.style.padding = '20px';
    modalContent.style.width = '500px';
    modalContent.style.maxWidth = '90%';
    modalContent.style.maxHeight = '90vh';
    modalContent.style.overflowY = 'auto';
    modalContent.style.position = 'relative';
    
    // Create modal title
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = 'New Category';
    modalTitle.style.marginTop = '0';
    modalTitle.style.marginBottom = '20px';
    modalTitle.style.fontSize = '24px';
    modalTitle.style.fontWeight = '500';
    modalTitle.style.display = 'flex';
    modalTitle.style.justifyContent = 'space-between';
    modalTitle.style.alignItems = 'center';
    
    // Add close button to title
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '&times;';
    closeButton.style.background = 'none';
    closeButton.style.border = 'none';
    closeButton.style.fontSize = '24px';
    closeButton.style.cursor = 'pointer';
    closeButton.style.color = 'var(--text-secondary)';
    closeButton.onclick = () => document.body.removeChild(modalOverlay);
    modalTitle.appendChild(closeButton);
    
    // Create form
    const form = document.createElement('form');
    form.onsubmit = (e) => {
        e.preventDefault();
        const categoryName = document.getElementById('categoryName').value;
        const description = document.getElementById('categoryDescription').value;
        const isPrivate = document.getElementById('categoryPrivate').checked;
        const isPinned = document.getElementById('categoryPinned').checked;
        const iconType = document.querySelector('.icon-select-btn.active')?.getAttribute('data-icon') || 'folder';
        const selectedBookId = document.getElementById('parentBook').value;
        
        if (!selectedBookId) {
            showNotification('Please select a book', 'error');
            return;
        }
        
        // Create the category - always with parentId: null
        const categoryId = 'category-' + Date.now();
        const newCategory = {
            id: categoryId,
            name: categoryName || 'New Category',
            description: description || '',
            type: 'category',
            bookId: selectedBookId,
            parentId: null, // Categories are always top-level
            isPrivate: isPrivate,
            isPinned: isPinned,
            iconType: iconType,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        
        // Make sure the book has a categories map
        if (!bookCategories.has(selectedBookId)) {
            bookCategories.set(selectedBookId, new Map());
        }
        
        // Add category to bookCategories
        bookCategories.get(selectedBookId).set(categoryId, newCategory);
        
        // Save data
        saveData();
        
        // Refresh the view
        showMyBooksPage();
        
        // Show notification
        showNotification('Category created successfully!');
        
        // Close the modal
        document.body.removeChild(modalOverlay);
    };
    
    // Category Name Field
    const nameGroup = document.createElement('div');
    nameGroup.style.marginBottom = '20px';
    
    const nameLabel = document.createElement('label');
    nameLabel.htmlFor = 'categoryName';
    nameLabel.textContent = 'Category Name *';
    nameLabel.style.display = 'block';
    nameLabel.style.marginBottom = '8px';
    nameLabel.style.fontWeight = '500';
    
    const nameInput = document.createElement('input');
    nameInput.type = 'text';
    nameInput.id = 'categoryName';
    nameInput.placeholder = 'Enter category name';
    nameInput.style.width = '100%';
    nameInput.style.padding = '10px';
    nameInput.style.borderRadius = 'var(--border-radius)';
    nameInput.style.border = '1px solid var(--border-color)';
    nameInput.style.backgroundColor = 'var(--background-color)';
    nameInput.style.color = 'var(--text-color)';
    nameInput.required = true;
    
    const nameHelp = document.createElement('div');
    nameHelp.textContent = 'Choose a clear and descriptive name';
    nameHelp.style.fontSize = '12px';
    nameHelp.style.color = 'var(--text-secondary)';
    nameHelp.style.marginTop = '5px';
    
    nameGroup.appendChild(nameLabel);
    nameGroup.appendChild(nameInput);
    nameGroup.appendChild(nameHelp);
    
    // Book selection field
    const bookGroup = document.createElement('div');
    bookGroup.style.marginBottom = '20px';
    
    const bookLabel = document.createElement('label');
    bookLabel.htmlFor = 'parentBook';
    bookLabel.textContent = 'Book *';
    bookLabel.style.display = 'block';
    bookLabel.style.marginBottom = '8px';
    bookLabel.style.fontWeight = '500';
    
    const bookSelect = document.createElement('select');
    bookSelect.id = 'parentBook';
    bookSelect.style.width = '100%';
    bookSelect.style.padding = '10px';
    bookSelect.style.borderRadius = 'var(--border-radius)';
    bookSelect.style.border = '1px solid var(--border-color)';
    bookSelect.style.backgroundColor = 'var(--background-color)';
    bookSelect.style.color = 'var(--text-color)';
    bookSelect.required = true;
    
    // Sort books alphabetically
    booksToShow.sort((a, b) => a.name.localeCompare(b.name));
    
    // Add all books from the current filter
    booksToShow.forEach(book => {
        const option = document.createElement('option');
        option.value = book.id;
        option.textContent = book.name;
        
        // Select the current book by default if provided
        if (bookId && book.id === bookId) {
            option.selected = true;
        }
        
        bookSelect.appendChild(option);
    });
    
    // If no book is initially selected and we have books to show, select the first one
    if ((!bookId || !bookSelect.querySelector('option[selected="true"]')) && bookSelect.options.length > 0) {
        bookSelect.options[0].selected = true;
    }
    
    const bookHelp = document.createElement('div');
    bookHelp.textContent = 'Categories are top-level elements within a book';
    bookHelp.style.fontSize = '12px';
    bookHelp.style.color = 'var(--text-secondary)';
    bookHelp.style.marginTop = '5px';
    
    bookGroup.appendChild(bookLabel);
    bookGroup.appendChild(bookSelect);
    bookGroup.appendChild(bookHelp);
    
    // Description Field
    const descGroup = document.createElement('div');
    descGroup.style.marginBottom = '20px';
    
    const descLabel = document.createElement('label');
    descLabel.htmlFor = 'categoryDescription';
    descLabel.textContent = 'Description';
    descLabel.style.display = 'block';
    descLabel.style.marginBottom = '8px';
    descLabel.style.fontWeight = '500';
    
    const descTextarea = document.createElement('textarea');
    descTextarea.id = 'categoryDescription';
    descTextarea.placeholder = 'Enter category description';
    descTextarea.style.width = '100%';
    descTextarea.style.padding = '10px';
    descTextarea.style.borderRadius = 'var(--border-radius)';
    descTextarea.style.border = '1px solid var(--border-color)';
    descTextarea.style.backgroundColor = 'var(--background-color)';
    descTextarea.style.color = 'var(--text-color)';
    descTextarea.style.minHeight = '100px';
    descTextarea.style.resize = 'vertical';
    
    const descHelp = document.createElement('div');
    descHelp.textContent = 'Provide a brief description of what this category contains';
    descHelp.style.fontSize = '12px';
    descHelp.style.color = 'var(--text-secondary)';
    descHelp.style.marginTop = '5px';
    
    descGroup.appendChild(descLabel);
    descGroup.appendChild(descTextarea);
    descGroup.appendChild(descHelp);
    
    // Icon selection
    const iconGroup = document.createElement('div');
    iconGroup.style.marginBottom = '20px';
    
    const iconLabel = document.createElement('div');
    iconLabel.textContent = 'Category Icon';
    iconLabel.style.display = 'block';
    iconLabel.style.marginBottom = '8px';
    iconLabel.style.fontWeight = '500';
    
    const iconButtons = document.createElement('div');
    iconButtons.style.display = 'flex';
    iconButtons.style.gap = '10px';
    iconButtons.style.flexWrap = 'wrap';
    
    // Folder icon (default)
    const folderIconBtn = document.createElement('button');
    folderIconBtn.type = 'button';
    folderIconBtn.className = 'icon-select-btn active';
    folderIconBtn.setAttribute('data-icon', 'folder');
    folderIconBtn.style.display = 'flex';
    folderIconBtn.style.alignItems = 'center';
    folderIconBtn.style.justifyContent = 'center';
    folderIconBtn.style.width = '40px';
    folderIconBtn.style.height = '40px';
    folderIconBtn.style.borderRadius = '4px';
    folderIconBtn.style.border = '1px solid var(--border-color)';
    folderIconBtn.style.backgroundColor = 'transparent';
    folderIconBtn.style.cursor = 'pointer';
    folderIconBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
        </svg>
    `;
    
    // Book icon
    const bookIconBtn = document.createElement('button');
    bookIconBtn.type = 'button';
    bookIconBtn.className = 'icon-select-btn';
    bookIconBtn.setAttribute('data-icon', 'book');
    bookIconBtn.style.display = 'flex';
    bookIconBtn.style.alignItems = 'center';
    bookIconBtn.style.justifyContent = 'center';
    bookIconBtn.style.width = '40px';
    bookIconBtn.style.height = '40px';
    bookIconBtn.style.borderRadius = '4px';
    bookIconBtn.style.border = '1px solid var(--border-color)';
    bookIconBtn.style.backgroundColor = 'transparent';
    bookIconBtn.style.cursor = 'pointer';
    bookIconBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
            <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
        </svg>
    `;
    
    // Document icon
    const docIconBtn = document.createElement('button');
    docIconBtn.type = 'button';
    docIconBtn.className = 'icon-select-btn';
    docIconBtn.setAttribute('data-icon', 'file');
    docIconBtn.style.display = 'flex';
    docIconBtn.style.alignItems = 'center';
    docIconBtn.style.justifyContent = 'center';
    docIconBtn.style.width = '40px';
    docIconBtn.style.height = '40px';
    docIconBtn.style.borderRadius = '4px';
    docIconBtn.style.border = '1px solid var(--border-color)';
    docIconBtn.style.backgroundColor = 'transparent';
    docIconBtn.style.cursor = 'pointer';
    docIconBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <polyline points="14 2 14 8 20 8"></polyline>
            <line x1="16" y1="13" x2="8" y2="13"></line>
            <line x1="16" y1="17" x2="8" y2="17"></line>
            <polyline points="10 9 9 9 8 9"></polyline>
        </svg>
    `;
    
    // Star icon
    const starIconBtn = document.createElement('button');
    starIconBtn.type = 'button';
    starIconBtn.className = 'icon-select-btn';
    starIconBtn.setAttribute('data-icon', 'star');
    starIconBtn.style.display = 'flex';
    starIconBtn.style.alignItems = 'center';
    starIconBtn.style.justifyContent = 'center';
    starIconBtn.style.width = '40px';
    starIconBtn.style.height = '40px';
    starIconBtn.style.borderRadius = '4px';
    starIconBtn.style.border = '1px solid var(--border-color)';
    starIconBtn.style.backgroundColor = 'transparent';
    starIconBtn.style.cursor = 'pointer';
    starIconBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
        </svg>
    `;
    
    // Heart icon
    const heartIconBtn = document.createElement('button');
    heartIconBtn.type = 'button';
    heartIconBtn.className = 'icon-select-btn';
    heartIconBtn.setAttribute('data-icon', 'heart');
    heartIconBtn.style.display = 'flex';
    heartIconBtn.style.alignItems = 'center';
    heartIconBtn.style.justifyContent = 'center';
    heartIconBtn.style.width = '40px';
    heartIconBtn.style.height = '40px';
    heartIconBtn.style.borderRadius = '4px';
    heartIconBtn.style.border = '1px solid var(--border-color)';
    heartIconBtn.style.backgroundColor = 'transparent';
    heartIconBtn.style.cursor = 'pointer';
    heartIconBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
        </svg>
    `;
    
    // Tag icon
    const tagIconBtn = document.createElement('button');
    tagIconBtn.type = 'button';
    tagIconBtn.className = 'icon-select-btn';
    tagIconBtn.setAttribute('data-icon', 'tag');
    tagIconBtn.style.display = 'flex';
    tagIconBtn.style.alignItems = 'center';
    tagIconBtn.style.justifyContent = 'center';
    tagIconBtn.style.width = '40px';
    tagIconBtn.style.height = '40px';
    tagIconBtn.style.borderRadius = '4px';
    tagIconBtn.style.border = '1px solid var(--border-color)';
    tagIconBtn.style.backgroundColor = 'transparent';
    tagIconBtn.style.cursor = 'pointer';
    tagIconBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
            <line x1="7" y1="7" x2="7.01" y2="7"></line>
        </svg>
    `;
    
    // Add icon buttons to container
    iconButtons.appendChild(folderIconBtn);
    iconButtons.appendChild(bookIconBtn);
    iconButtons.appendChild(docIconBtn);
    iconButtons.appendChild(starIconBtn);
    iconButtons.appendChild(heartIconBtn);
    iconButtons.appendChild(tagIconBtn);
    
    // Add click event to icon buttons
    const allIconButtons = [folderIconBtn, bookIconBtn, docIconBtn, starIconBtn, heartIconBtn, tagIconBtn];
    allIconButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            // Remove active class from all buttons
            allIconButtons.forEach(b => b.classList.remove('active'));
            // Add active class to clicked button
            this.classList.add('active');
        });
    });
    
    iconGroup.appendChild(iconLabel);
    iconGroup.appendChild(iconButtons);
    
    // Privacy and Pinning options
    const optionsGroup = document.createElement('div');
    optionsGroup.style.marginBottom = '20px';
    optionsGroup.style.display = 'flex';
    optionsGroup.style.gap = '20px';
    
    // Private option
    const privateOption = document.createElement('div');
    privateOption.style.display = 'flex';
    privateOption.style.alignItems = 'center';
    privateOption.style.gap = '8px';
    
    const privateCheckbox = document.createElement('input');
    privateCheckbox.type = 'checkbox';
    privateCheckbox.id = 'categoryPrivate';
    privateCheckbox.style.width = '16px';
    privateCheckbox.style.height = '16px';
    
    const privateLabel = document.createElement('label');
    privateLabel.htmlFor = 'categoryPrivate';
    privateLabel.textContent = 'Private';
    privateLabel.style.fontSize = '14px';
    privateLabel.style.cursor = 'pointer';
    
    privateOption.appendChild(privateCheckbox);
    privateOption.appendChild(privateLabel);
    
    // Pinned option
    const pinnedOption = document.createElement('div');
    pinnedOption.style.display = 'flex';
    pinnedOption.style.alignItems = 'center';
    pinnedOption.style.gap = '8px';
    
    const pinnedCheckbox = document.createElement('input');
    pinnedCheckbox.type = 'checkbox';
    pinnedCheckbox.id = 'categoryPinned';
    pinnedCheckbox.style.width = '16px';
    pinnedCheckbox.style.height = '16px';
    
    const pinnedLabel = document.createElement('label');
    pinnedLabel.htmlFor = 'categoryPinned';
    pinnedLabel.textContent = 'Pinned';
    pinnedLabel.style.fontSize = '14px';
    pinnedLabel.style.cursor = 'pointer';
    
    pinnedOption.appendChild(pinnedCheckbox);
    pinnedOption.appendChild(pinnedLabel);
    
    // Add options to group
    optionsGroup.appendChild(privateOption);
    optionsGroup.appendChild(pinnedOption);
    
    // Submit button
    const submitButton = document.createElement('button');
    submitButton.type = 'submit';
    submitButton.className = 'btn btn-primary';
    submitButton.style.width = '100%';
    submitButton.style.marginTop = '10px';
    submitButton.style.padding = '10px';
    submitButton.textContent = 'Create Category';
    
    // Add all elements to form
    form.appendChild(nameGroup);
    form.appendChild(bookGroup);
    form.appendChild(descGroup);
    form.appendChild(iconGroup);
    form.appendChild(optionsGroup);
    form.appendChild(submitButton);
    
    // Add elements to modal
    modalContent.appendChild(modalTitle);
    modalContent.appendChild(form);
    modalOverlay.appendChild(modalContent);
    
    // Add modal to body
    document.body.appendChild(modalOverlay);
    
    // Focus on input
    setTimeout(() => {
    nameInput.focus();
    }, 100);
}

// Function to add a new folder
function addNewFolder(parentId = null) {
    // Get books from the current filter
    let booksToShow = [];
    if (selectedFilterCategory === 'all-books') {
        // Show all books
        booksToShow = Array.from(books.values());
    } else if (bookFilters.has(selectedFilterCategory)) {
        // Show only books in the selected filter
        booksToShow = bookFilters.get(selectedFilterCategory);
    }
    
    // Check if there are any books in the current filter
    if (booksToShow.length === 0) {
        showNotification(`The "${selectedFilterCategory}" filter has no books. Please create a book first or select a filter that contains books.`, 'error');
        return;
    }

    if (!selectedBookId) {
        showNotification('Please select a book first', 'error');
        return;
    }
    
    // Check if there's at least one category in the book
    if (bookCategories.has(selectedBookId)) {
        const categories = Array.from(bookCategories.get(selectedBookId).values());
        const hasCategory = categories.some(item => item.type === 'category');
        
        if (!hasCategory) {
            showNotification('Please create a category first before adding a folder', 'error');
            return;
        }
    } else {
        showNotification('Please create a category first before adding a folder', 'error');
        return;
    }
    
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    modalOverlay.style.position = 'fixed';
    modalOverlay.style.top = '0';
    modalOverlay.style.left = '0';
    modalOverlay.style.width = '100%';
    modalOverlay.style.height = '100%';
    modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modalOverlay.style.zIndex = '1000';
    modalOverlay.style.display = 'flex';
    modalOverlay.style.alignItems = 'center';
    modalOverlay.style.justifyContent = 'center';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    modalContent.style.backgroundColor = 'var(--card-color)';
    modalContent.style.borderRadius = 'var(--border-radius)';
    modalContent.style.padding = '20px';
    modalContent.style.width = '450px';
    modalContent.style.maxWidth = '90%';
    modalContent.style.maxHeight = '90vh';
    modalContent.style.overflowY = 'auto';
    modalContent.style.position = 'relative';
    
    // Create modal title
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = 'New Folder';
    modalTitle.style.marginTop = '0';
    modalTitle.style.marginBottom = '20px';
    modalTitle.style.fontSize = '24px';
    modalTitle.style.fontWeight = '500';
    modalTitle.style.display = 'flex';
    modalTitle.style.justifyContent = 'space-between';
    modalTitle.style.alignItems = 'center';
    
    // Add close button to title
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '&times;';
    closeButton.style.background = 'none';
    closeButton.style.border = 'none';
    closeButton.style.fontSize = '24px';
    closeButton.style.cursor = 'pointer';
    closeButton.style.color = 'var(--text-secondary)';
    closeButton.onclick = () => document.body.removeChild(modalOverlay);
    modalTitle.appendChild(closeButton);
    
    // Create form
    const form = document.createElement('form');
    form.onsubmit = (e) => {
        e.preventDefault();
        const folderName = document.getElementById('folderName').value;
        const selectedCategoryId = document.getElementById('parentCategory').value;
        
        // Create the folder
        const folderId = 'folder-' + Date.now();
        const newFolder = {
            id: folderId,
            name: folderName || 'New Folder',
            type: 'folder',
            parentId: selectedCategoryId,
            bookId: selectedBookId,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        
        // Make sure the book has a categories map
        if (!bookCategories.has(selectedBookId)) {
            bookCategories.set(selectedBookId, new Map());
        }
        
        // Add folder to bookCategories
        bookCategories.get(selectedBookId).set(folderId, newFolder);
        
        // Save data
        saveData();
        
        // Refresh the view
        showMyBooksPage();
        
        // Show notification
        showNotification('Folder created successfully!');
        
        // Close the modal
        document.body.removeChild(modalOverlay);
    };
    
    // Folder Name Field
    const nameGroup = document.createElement('div');
    nameGroup.style.marginBottom = '20px';
    
    const nameLabel = document.createElement('label');
    nameLabel.htmlFor = 'folderName';
    nameLabel.textContent = 'Folder Name *';
    nameLabel.style.display = 'block';
    nameLabel.style.marginBottom = '8px';
    nameLabel.style.fontWeight = '500';
    
    const nameInput = document.createElement('input');
    nameInput.type = 'text';
    nameInput.id = 'folderName';
    nameInput.placeholder = 'Enter folder name';
    nameInput.style.width = '100%';
    nameInput.style.padding = '10px';
    nameInput.style.borderRadius = 'var(--border-radius)';
    nameInput.style.border = '1px solid var(--border-color)';
    nameInput.style.backgroundColor = 'var(--background-color)';
    nameInput.style.color = 'var(--text-color)';
    nameInput.required = true;
    
    nameGroup.appendChild(nameLabel);
    nameGroup.appendChild(nameInput);
    
    // Parent Category Field
    const categoryGroup = document.createElement('div');
    categoryGroup.style.marginBottom = '20px';
    
    const categoryLabel = document.createElement('label');
    categoryLabel.htmlFor = 'parentCategory';
    categoryLabel.textContent = 'Parent Category *';
    categoryLabel.style.display = 'block';
    categoryLabel.style.marginBottom = '8px';
    categoryLabel.style.fontWeight = '500';
    
    // Create category select using helper function
    const categorySelect = createCategorySelect(parentId);
    
    categoryGroup.appendChild(categoryLabel);
    categoryGroup.appendChild(categorySelect);
    
    // Form actions
    const formActions = document.createElement('div');
    formActions.style.display = 'flex';
    formActions.style.justifyContent = 'flex-end';
    formActions.style.gap = '10px';
    formActions.style.marginTop = '20px';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.textContent = 'Cancel';
    cancelBtn.style.padding = '10px 20px';
    cancelBtn.style.borderRadius = 'var(--border-radius)';
    cancelBtn.style.border = '1px solid var(--border-color)';
    cancelBtn.style.backgroundColor = 'transparent';
    cancelBtn.style.color = 'var(--text-color)';
    cancelBtn.style.cursor = 'pointer';
    cancelBtn.onclick = () => document.body.removeChild(modalOverlay);
    
    const createBtn = document.createElement('button');
    createBtn.type = 'submit';
    createBtn.textContent = 'Create Folder';
    createBtn.style.padding = '10px 20px';
    createBtn.style.borderRadius = 'var(--border-radius)';
    createBtn.style.border = 'none';
    createBtn.style.backgroundColor = 'var(--button-blue)';
    createBtn.style.color = 'white';
    createBtn.style.cursor = 'pointer';
    
    formActions.appendChild(cancelBtn);
    formActions.appendChild(createBtn);
    
    // Assemble the form
    form.appendChild(nameGroup);
    form.appendChild(categoryGroup);
    form.appendChild(formActions);
    
    // Assemble the modal
    modalContent.appendChild(modalTitle);
    modalContent.appendChild(form);
    modalOverlay.appendChild(modalContent);
    
    // Add modal to the body
    document.body.appendChild(modalOverlay);
    
    // Focus the name input
    nameInput.focus();
}

// Function to add a new article
function addNewArticle(parentId = null) {
    // Get books from the current filter
    let booksToShow = [];
    if (selectedFilterCategory === 'all-books') {
        // Show all books
        booksToShow = Array.from(books.values());
    } else if (bookFilters.has(selectedFilterCategory)) {
        // Show only books in the selected filter
        booksToShow = bookFilters.get(selectedFilterCategory);
    }
    
    // Check if there are any books in the current filter
    if (booksToShow.length === 0) {
        showNotification(`The "${selectedFilterCategory}" filter has no books. Please create a book first or select a filter that contains books.`, 'error');
        return;
    }

    if (!selectedBookId) {
        showNotification('Please select a book first', 'error');
        return;
    }
    
    // Check if there's at least one category in the book
    if (bookCategories.has(selectedBookId)) {
        const categories = Array.from(bookCategories.get(selectedBookId).values());
        const hasCategory = categories.some(item => item.type === 'category');
        
        if (!hasCategory) {
            showNotification('Please create a category first before adding an article', 'error');
            return;
        }
    } else {
        showNotification('Please create a category first before adding an article', 'error');
        return;
    }
    
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    modalOverlay.style.position = 'fixed';
    modalOverlay.style.top = '0';
    modalOverlay.style.left = '0';
    modalOverlay.style.width = '100%';
    modalOverlay.style.height = '100%';
    modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modalOverlay.style.zIndex = '1000';
    modalOverlay.style.display = 'flex';
    modalOverlay.style.alignItems = 'center';
    modalOverlay.style.justifyContent = 'center';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    modalContent.style.backgroundColor = 'var(--card-color)';
    modalContent.style.borderRadius = 'var(--border-radius)';
    modalContent.style.padding = '20px';
    modalContent.style.width = '450px';
    modalContent.style.maxWidth = '90%';
    modalContent.style.maxHeight = '90vh';
    modalContent.style.overflowY = 'auto';
    modalContent.style.position = 'relative';
    
    // Create modal title
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = 'New Article';
    modalTitle.style.marginTop = '0';
    modalTitle.style.marginBottom = '20px';
    modalTitle.style.fontSize = '24px';
    modalTitle.style.fontWeight = '500';
    modalTitle.style.display = 'flex';
    modalTitle.style.justifyContent = 'space-between';
    modalTitle.style.alignItems = 'center';
    
    // Add close button to title
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '&times;';
    closeButton.style.background = 'none';
    closeButton.style.border = 'none';
    closeButton.style.fontSize = '24px';
    closeButton.style.cursor = 'pointer';
    closeButton.style.color = 'var(--text-secondary)';
    closeButton.onclick = () => document.body.removeChild(modalOverlay);
    modalTitle.appendChild(closeButton);
    
    // Create form
    const form = document.createElement('form');
    form.onsubmit = (e) => {
        e.preventDefault();
        const articleName = document.getElementById('articleName').value;
        const selectedCategoryId = document.getElementById('parentCategory').value;
        
        // Create the article
        const articleId = 'article-' + Date.now();
        const newArticle = {
            id: articleId,
            name: articleName || 'New Article',
            type: 'article',
            parentId: selectedCategoryId,
            bookId: selectedBookId,
            status: 'draft',
            content: '<p>Start writing your article here...</p>',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        
        // Make sure the book has a categories map
        if (!bookCategories.has(selectedBookId)) {
            bookCategories.set(selectedBookId, new Map());
        }
        
        // Add article to bookCategories
        bookCategories.get(selectedBookId).set(articleId, newArticle);
        
        // Save data
        saveData();
        
        // Close the modal
        document.body.removeChild(modalOverlay);
        
        // Refresh the view
        showMyBooksPage();
        
        // Open the article editor for the new article
        const editor = document.getElementById('articleEditor');
        // TODO: Implement article editor functionality
        // editor.classList.add('active');
        
        // Show notification
        showNotification('Article created successfully!');
    };
    
    // Article Name Field
    const nameGroup = document.createElement('div');
    nameGroup.style.marginBottom = '20px';
    
    const nameLabel = document.createElement('label');
    nameLabel.htmlFor = 'articleName';
    nameLabel.textContent = 'Article Name *';
    nameLabel.style.display = 'block';
    nameLabel.style.marginBottom = '8px';
    nameLabel.style.fontWeight = '500';
    
    const nameInput = document.createElement('input');
    nameInput.type = 'text';
    nameInput.id = 'articleName';
    nameInput.placeholder = 'Enter article name';
    nameInput.style.width = '100%';
    nameInput.style.padding = '10px';
    nameInput.style.borderRadius = 'var(--border-radius)';
    nameInput.style.border = '1px solid var(--border-color)';
    nameInput.style.backgroundColor = 'var(--background-color)';
    nameInput.style.color = 'var(--text-color)';
    nameInput.required = true;
    
    nameGroup.appendChild(nameLabel);
    nameGroup.appendChild(nameInput);
    
    // Parent Category Field
    const categoryGroup = document.createElement('div');
    categoryGroup.style.marginBottom = '20px';
    
    const categoryLabel = document.createElement('label');
    categoryLabel.htmlFor = 'parentCategory';
    categoryLabel.textContent = 'Parent Category *';
    categoryLabel.style.display = 'block';
    categoryLabel.style.marginBottom = '8px';
    categoryLabel.style.fontWeight = '500';
    
    // Create category select using helper function
    const categorySelect = createCategorySelect(parentId);
    
    categoryGroup.appendChild(categoryLabel);
    categoryGroup.appendChild(categorySelect);
    
    // Form actions
    const formActions = document.createElement('div');
    formActions.style.display = 'flex';
    formActions.style.justifyContent = 'flex-end';
    formActions.style.gap = '10px';
    formActions.style.marginTop = '20px';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.textContent = 'Cancel';
    cancelBtn.style.padding = '10px 20px';
    cancelBtn.style.borderRadius = 'var(--border-radius)';
    cancelBtn.style.border = '1px solid var(--border-color)';
    cancelBtn.style.backgroundColor = 'transparent';
    cancelBtn.style.color = 'var(--text-color)';
    cancelBtn.style.cursor = 'pointer';
    cancelBtn.onclick = () => document.body.removeChild(modalOverlay);
    
    const createBtn = document.createElement('button');
    createBtn.type = 'submit';
    createBtn.textContent = 'Create Article';
    createBtn.style.padding = '10px 20px';
    createBtn.style.borderRadius = 'var(--border-radius)';
    createBtn.style.border = 'none';
    createBtn.style.backgroundColor = 'var(--button-blue)';
    createBtn.style.color = 'white';
    createBtn.style.cursor = 'pointer';
    
    formActions.appendChild(cancelBtn);
    formActions.appendChild(createBtn);
    
    // Assemble the form
    form.appendChild(nameGroup);
    form.appendChild(categoryGroup);
    form.appendChild(formActions);
    
    // Assemble the modal
    modalContent.appendChild(modalTitle);
    modalContent.appendChild(form);
    modalOverlay.appendChild(modalContent);
    
    // Add modal to the body
    document.body.appendChild(modalOverlay);
    
    // Focus the name input
    nameInput.focus();
}

// Function to add a new file
function addNewFile(parentId = null) {
    // Get books from the current filter
    let booksToShow = [];
    if (selectedFilterCategory === 'all-books') {
        // Show all books
        booksToShow = Array.from(books.values());
    } else if (bookFilters.has(selectedFilterCategory)) {
        // Show only books in the selected filter
        booksToShow = bookFilters.get(selectedFilterCategory);
    }
    
    // Check if there are any books in the current filter
    if (booksToShow.length === 0) {
        showNotification(`The "${selectedFilterCategory}" filter has no books. Please create a book first or select a filter that contains books.`, 'error');
        return;
    }

    if (!selectedBookId) {
        showNotification('Please select a book first', 'error');
        return;
    }
    
    // Check if there's at least one category in the book
    if (bookCategories.has(selectedBookId)) {
        const categories = Array.from(bookCategories.get(selectedBookId).values());
        const hasCategory = categories.some(item => item.type === 'category');
        
        if (!hasCategory) {
            showNotification('Please create a category first before adding a file', 'error');
            return;
        }
    } else {
        showNotification('Please create a category first before adding a file', 'error');
        return;
    }
    
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    modalOverlay.style.position = 'fixed';
    modalOverlay.style.top = '0';
    modalOverlay.style.left = '0';
    modalOverlay.style.width = '100%';
    modalOverlay.style.height = '100%';
    modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modalOverlay.style.zIndex = '1000';
    modalOverlay.style.display = 'flex';
    modalOverlay.style.alignItems = 'center';
    modalOverlay.style.justifyContent = 'center';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    modalContent.style.backgroundColor = 'var(--card-color)';
    modalContent.style.borderRadius = 'var(--border-radius)';
    modalContent.style.padding = '20px';
    modalContent.style.width = '450px';
    modalContent.style.maxWidth = '90%';
    modalContent.style.maxHeight = '90vh';
    modalContent.style.overflowY = 'auto';
    modalContent.style.position = 'relative';
    
    // Create modal title
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = 'Upload File';
    modalTitle.style.marginTop = '0';
    modalTitle.style.marginBottom = '20px';
    modalTitle.style.fontSize = '24px';
    modalTitle.style.fontWeight = '500';
    modalTitle.style.display = 'flex';
    modalTitle.style.justifyContent = 'space-between';
    modalTitle.style.alignItems = 'center';
    
    // Add close button to title
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '&times;';
    closeButton.style.background = 'none';
    closeButton.style.border = 'none';
    closeButton.style.fontSize = '24px';
    closeButton.style.cursor = 'pointer';
    closeButton.style.color = 'var(--text-secondary)';
    closeButton.onclick = () => document.body.removeChild(modalOverlay);
    modalTitle.appendChild(closeButton);
    
    // Create form
    const form = document.createElement('form');
    form.onsubmit = (e) => {
        e.preventDefault();
        
        const selectedCategoryId = document.getElementById('parentCategory').value;
        const fileInput = document.getElementById('fileInput');
        
        // If no file is selected, show an error
        if (!fileInput.files || fileInput.files.length === 0) {
            showNotification('Please select a file to upload', 'error');
            return;
        }
        
        const file = fileInput.files[0];
        const reader = new FileReader();
        
        reader.onload = function(event) {
            // Get selected icon
            const selectedIconBtn = document.querySelector('.icon-select-btn.active');
            const selectedIcon = selectedIconBtn ? selectedIconBtn.getAttribute('data-icon') : 'file';
            
            // Get privacy setting
            const isPrivate = document.getElementById('filePrivate').checked;
            
            // Get upload type
            const uploadType = document.getElementById('uploadAsFile').checked ? 'file' : 'article';
            
            // Create the file object
            const fileId = 'file-' + Date.now();
            const newFile = {
                id: fileId,
                name: file.name,
                type: uploadType,
                fileType: file.type,
                size: file.size,
                content: event.target.result,
                parentId: selectedCategoryId,
                bookId: selectedBookId,
                icon: selectedIcon,
                isPrivate: isPrivate,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            // Make sure the book has a categories map
            if (!bookCategories.has(selectedBookId)) {
                bookCategories.set(selectedBookId, new Map());
            }
            
            // Add file to bookCategories
            bookCategories.get(selectedBookId).set(fileId, newFile);
            
            // Save data
            saveData();
            
            // Close the modal
            document.body.removeChild(modalOverlay);
            
            // Refresh the view
            showMyBooksPage();
            
            // Show notification
            showNotification('File uploaded successfully!');
        };
        
        reader.onerror = function() {
            showNotification('Error reading file', 'error');
        };
        
        // Read the file as a data URL
        reader.readAsDataURL(file);
    };
    
    // Parent Category Field
    const categoryGroup = document.createElement('div');
    categoryGroup.style.marginBottom = '20px';
    
    const categoryLabel = document.createElement('label');
    categoryLabel.htmlFor = 'parentCategory';
    categoryLabel.textContent = 'Parent Category *';
    categoryLabel.style.display = 'block';
    categoryLabel.style.marginBottom = '8px';
    categoryLabel.style.fontWeight = '500';
    
    // Create category select using helper function
    const categorySelect = createCategorySelect(parentId);
    
    categoryGroup.appendChild(categoryLabel);
    categoryGroup.appendChild(categorySelect);
    
    // File Input Field
    const fileGroup = document.createElement('div');
    fileGroup.style.marginBottom = '20px';
    
    const fileLabel = document.createElement('label');
    fileLabel.htmlFor = 'fileInput';
    fileLabel.textContent = 'Select File *';
    fileLabel.style.display = 'block';
    fileLabel.style.marginBottom = '8px';
    fileLabel.style.fontWeight = '500';
    
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.id = 'fileInput';
    fileInput.style.width = '100%';
    fileInput.style.padding = '10px';
    fileInput.style.borderRadius = 'var(--border-radius)';
    fileInput.style.border = '1px solid var(--border-color)';
    fileInput.style.backgroundColor = 'var(--background-color)';
    fileInput.style.color = 'var(--text-color)';
    fileInput.required = true;
    
    fileGroup.appendChild(fileLabel);
    fileGroup.appendChild(fileInput);
    
    // Form actions
    const formActions = document.createElement('div');
    formActions.style.display = 'flex';
    formActions.style.justifyContent = 'flex-end';
    formActions.style.gap = '10px';
    formActions.style.marginTop = '20px';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.textContent = 'Cancel';
    cancelBtn.style.padding = '10px 20px';
    cancelBtn.style.borderRadius = 'var(--border-radius)';
    cancelBtn.style.border = '1px solid var(--border-color)';
    cancelBtn.style.backgroundColor = 'transparent';
    cancelBtn.style.color = 'var(--text-color)';
    cancelBtn.style.cursor = 'pointer';
    cancelBtn.onclick = () => document.body.removeChild(modalOverlay);
    
    const uploadBtn = document.createElement('button');
    uploadBtn.type = 'submit';
    uploadBtn.textContent = 'Upload File';
    uploadBtn.style.padding = '10px 20px';
    uploadBtn.style.borderRadius = 'var(--border-radius)';
    uploadBtn.style.border = 'none';
    uploadBtn.style.backgroundColor = 'var(--button-blue)';
    uploadBtn.style.color = 'white';
    uploadBtn.style.cursor = 'pointer';
    
    formActions.appendChild(cancelBtn);
    formActions.appendChild(uploadBtn);
    
    // Assemble the form
    form.appendChild(categoryGroup);
    form.appendChild(fileGroup);
    form.appendChild(formActions);
    
    // Assemble the modal
    modalContent.appendChild(modalTitle);
    modalContent.appendChild(form);
    modalOverlay.appendChild(modalContent);
    
    // Add modal to the body
    document.body.appendChild(modalOverlay);
}

// Helper function to format file size
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Function to update books in the sidebar
function updateBooksSidebar() {
    const booksList = document.querySelector('.books-list');
    if (!booksList) {
        console.error('Books list container not found!');
        return;
    }
    
    console.log('Updating books sidebar...');
    
    // Clear existing books
    booksList.innerHTML = '';

    try {
        // Handle both Map and Array structures
        let booksArray = [];
        
        if (books instanceof Map) {
            console.log('Books is a Map with size:', books.size);
            booksArray = Array.from(books.values());
        } else if (Array.isArray(books)) {
            console.log('Books is an Array with length:', books.length);
            // If it's an array of [key, value] pairs (from Map.entries())
            if (books.length > 0 && Array.isArray(books[0]) && books[0].length === 2) {
                booksArray = books.map(entry => entry[1]);
            } else {
                booksArray = books;
            }
        } else {
            console.log('Books is neither Map nor Array:', typeof books);
            // If it's some other object, try to convert it
            booksArray = Object.values(books || {});
        }
        
        console.log('Processed books for display:', booksArray);
        
        // Add all books to the sidebar
        if (booksArray.length > 0) {
            booksArray.forEach(book => {
                // Skip if book or book.id is undefined
                if (!book || !book.id) {
                    console.warn('Skipping invalid book entry:', book);
                    return;
                }
                
                const bookItem = document.createElement('div');
                bookItem.className = 'book-item';
                bookItem.setAttribute('data-book-id', book.id);
                
                if (book.id === selectedBookId) {
                    bookItem.classList.add('active');
                    console.log('Book marked as active in sidebar:', book.name);
                }
                
                bookItem.innerHTML = `
                    <div class="book-sidebar-content">
                        <span class="book-icon-small">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                                <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
                            </svg>
                        </span>
                        <span class="book-title-small">${book.name}</span>
                    </div>
                `;
                
                booksList.appendChild(bookItem);
                
                // Add click event to select book
                bookItem.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const bookId = this.getAttribute('data-book-id');
                    console.log('Book clicked in sidebar:', bookId, book.name);
                    
                    if (bookId) {
                        // Update UI first
                        document.querySelectorAll('.book-item').forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        
                        // Then call selectBook
                        selectBook(bookId);
                    }
                });
            });
        } else {
            console.log('No books found');
            booksList.innerHTML = '<div class="no-books" style="padding: 10px 20px; color: var(--text-secondary); font-size: 14px;">No books yet</div>';
        }
    } catch (error) {
        console.error('Error updating books sidebar:', error);
        booksList.innerHTML = '<div class="error-state" style="padding: 10px 20px; color: #ff4444; font-size: 14px;">Error loading books</div>';
    }
}

// Load saved data when the page loads
document.addEventListener('DOMContentLoaded', function() {
    try {
        // Initialize UI
        loadStoredData();
        setupEventListeners();
        console.log("DOM fully loaded, setting up event listeners");
    } catch (error) {
        console.error('Error loading data:', error);
        showNotification('Error loading data', 'error');
    }
});

// Modified loadStoredData function to replace loadBooks references
function loadStoredData() {
    try {
        // Load all data
        loadData();
        
        // Update the sidebar with loaded books
        updateBooksSidebar();
        
        console.log("Data loaded successfully");
    } catch (error) {
        console.error("Error loading from localStorage:", error);
    }
}

// Function to show "Add new" menu dropdown
function showAddNewMenu(button) {
    // Handle if button is passed as event or element
    if (button.target) {
        button = button.target.closest('.btn-add') || button.target;
    }
    
    // Remove any existing dropdown
    const existingDropdown = document.querySelector('.kb-dropdown');
    if (existingDropdown) {
        existingDropdown.remove();
    }
    
    // Create dropdown menu
    const dropdown = document.createElement('div');
    dropdown.className = 'kb-dropdown custom-dropdown-content';
    dropdown.style.position = 'absolute';
    dropdown.style.zIndex = '1000';
    dropdown.style.backgroundColor = 'var(--card-color)';
    dropdown.style.border = '1px solid var(--border-color)';
    dropdown.style.borderRadius = 'var(--border-radius)';
    dropdown.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.3)';
    dropdown.style.minWidth = '160px';
    dropdown.style.overflow = 'hidden';
    
    // Position dropdown below the button
    const buttonRect = button.getBoundingClientRect();
    dropdown.style.top = (buttonRect.bottom + window.scrollY + 5) + 'px';
    dropdown.style.right = (window.innerWidth - buttonRect.right) + 'px';
    
    // Check if the current book has any categories
    let hasCategories = false;
    if (selectedBookId && bookCategories.has(selectedBookId)) {
        const categories = Array.from(bookCategories.get(selectedBookId).values());
        hasCategories = categories.some(item => item.type === 'category');
    }
    
    const createDropdownItem = (action, icon, text, isDisabled = false) => {
        const item = document.createElement('div');
        item.className = 'custom-dropdown-item';
        item.setAttribute('data-action', action);
        
        // Add disabled styling if needed
        if (isDisabled) {
            item.style.opacity = '0.5';
            item.style.cursor = 'not-allowed';
            item.title = 'Please create a category first';
        } else {
            item.style.cursor = 'pointer';
        }
        
        item.innerHTML = icon + ' ' + text;
        
        if (!isDisabled) {
            item.addEventListener('click', function() {
                switch (action) {
                    case 'book':
                        addNewBook();
                        break;
                    case 'category':
                        addNewCategory();
                        break;
                    case 'folder':
                        addNewFolder();
                        break;
                    case 'article':
                        addNewArticle();
                        break;
                    case 'file':
                        addNewFile();
                        break;
                }
                
                // Remove dropdown after selection
                dropdown.remove();
            });
        }
        
        return item;
    };
    
    // Book item
    dropdown.appendChild(
        createDropdownItem(
            'book',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                        <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                        <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
            </svg>`,
            'New Book'
        )
    );
    
    // Category item
    dropdown.appendChild(
        createDropdownItem(
            'category',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path>
            </svg>`,
            'New Category'
        )
    );
    
    // Folder item
    dropdown.appendChild(
        createDropdownItem(
            'folder',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M3 7v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2h-9a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2z"></path>
            </svg>`,
            'New Folder',
            !hasCategories
        )
    );
    
    // Article item
    dropdown.appendChild(
        createDropdownItem(
            'article',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
            </svg>`,
            'New Article',
            !hasCategories
        )
    );
    
    // File item
    dropdown.appendChild(
        createDropdownItem(
            'file',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
                <polyline points="13 2 13 9 20 9"></polyline>
            </svg>`,
            'Upload File',
            !hasCategories
        )
    );
    
    // Append the dropdown to the document body
    document.body.appendChild(dropdown);
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function closeDropdown(e) {
        if (!dropdown.contains(e.target) && e.target !== button && !e.target.closest('.btn-add')) {
            dropdown.remove();
            document.removeEventListener('click', closeDropdown);
        }
    });
}

// Function to show "Add content" menu dropdown
function showAddContentMenu(button) {
    // Handle if button is passed as event or element
    if (button.target) {
        button = button.target.closest('.tree-action-btn[data-action="add"]') || button.target;
    }
    
    // Get the parent row
    const row = button.closest('tr');
    if (!row) return;
    
    const parentId = row.getAttribute('data-category-id');
    if (!parentId) return;
    
    // Remove any existing dropdown
    const existingDropdown = document.querySelector('.kb-content-dropdown');
    if (existingDropdown) {
        existingDropdown.remove();
    }
    
    // Create dropdown menu
    const dropdown = document.createElement('div');
    dropdown.className = 'kb-content-dropdown custom-dropdown-content';
    dropdown.style.position = 'absolute';
    dropdown.style.zIndex = '1000';
    dropdown.style.backgroundColor = 'var(--card-color)';
    dropdown.style.border = '1px solid var(--border-color)';
    dropdown.style.borderRadius = 'var(--border-radius)';
    dropdown.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.3)';
    dropdown.style.minWidth = '160px';
    dropdown.style.overflow = 'hidden';
    
    // Position dropdown near the button
    const buttonRect = button.getBoundingClientRect();
    dropdown.style.top = (buttonRect.bottom + window.scrollY + 5) + 'px';
    dropdown.style.left = (buttonRect.left + window.scrollX) + 'px';
    
    // Check if the current book has any categories
    let hasCategories = false;
    if (selectedBookId && bookCategories.has(selectedBookId)) {
        const categories = Array.from(bookCategories.get(selectedBookId).values());
        hasCategories = categories.some(item => item.type === 'category');
    }
    
    const createDropdownItem = (action, icon, text, isDisabled = false) => {
        const item = document.createElement('div');
        item.className = 'custom-dropdown-item';
        item.setAttribute('data-action', action);
        
        // Add disabled styling if needed
        if (isDisabled) {
            item.style.opacity = '0.5';
            item.style.cursor = 'not-allowed';
            item.title = 'Please create a category first';
        } else {
            item.style.cursor = 'pointer';
        }
        
        item.innerHTML = icon + ' ' + text;
        
        if (!isDisabled) {
            item.addEventListener('click', function() {
                switch (action) {
                    case 'folder':
                        addNewFolder(parentId);
                        break;
                    case 'article':
                        addNewArticle(parentId);
                        break;
                    case 'file':
                        addNewFile(parentId);
                        break;
                }
                
                // Remove dropdown after selection
                dropdown.remove();
            });
        }
        
        return item;
    };
    
    // Folder item
    dropdown.appendChild(
        createDropdownItem(
            'folder',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M3 7v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2h-9a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2z"></path>
            </svg>`,
            'New Folder',
            !hasCategories && row.classList.contains('book-row')
        )
    );
    
    // Article item
    dropdown.appendChild(
        createDropdownItem(
            'article',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
            </svg>`,
            'New Article',
            !hasCategories && row.classList.contains('book-row')
        )
    );
    
    // File item
    dropdown.appendChild(
        createDropdownItem(
            'file',
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
                <polyline points="13 2 13 9 20 9"></polyline>
            </svg>`,
            'Upload File',
            !hasCategories && row.classList.contains('book-row')
        )
    );
    
    // Append the dropdown to the document body
    document.body.appendChild(dropdown);
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function closeDropdown(e) {
        if (!dropdown.contains(e.target) && e.target !== button && !e.target.closest('.tree-action-btn[data-action="add"]')) {
            dropdown.remove();
            document.removeEventListener('click', closeDropdown);
        }
    });
}

// Function to show more options menu
function showMoreOptionsMenu(button) {
    // Handle if button is passed as event or element
    if (button.target) {
        button = button.target.closest('.tree-action-btn[data-action="more"]') || button.target;
    }
    
    // Get the parent row
    const row = button.closest('tr');
    if (!row) return;
    
    const itemId = row.getAttribute('data-category-id');
    if (!itemId) return;
    
    // Check if this is a file, category, folder, or article
    const isFile = row.classList.contains('file-row');
    const isCategory = row.classList.contains('category-row');
    const isFolder = row.classList.contains('folder-row');
    const isArticle = row.classList.contains('article-row');
    
    // Remove any existing dropdown
    const existingDropdown = document.querySelector('.more-options-dropdown');
    if (existingDropdown) {
        existingDropdown.remove();
    }
    
    // Create dropdown menu
    const dropdown = document.createElement('div');
    dropdown.className = 'more-options-dropdown custom-dropdown-content';
    
    // Position the dropdown near the button
    const buttonRect = button.getBoundingClientRect();
    dropdown.style.position = 'absolute';
    dropdown.style.top = (buttonRect.bottom + 5) + 'px';
    dropdown.style.left = (buttonRect.left) + 'px';
    dropdown.style.border = '1px solid var(--border-color)';
    dropdown.style.zIndex = '1000';
    
    // Common options for all item types
    dropdown.innerHTML = `
        <div class="dropdown-item custom-dropdown-item" data-action="edit">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                    </svg>
            Edit
                </div>
        <div class="dropdown-item custom-dropdown-item" data-action="duplicate">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                    </svg>
            Duplicate
                </div>
        <div class="dropdown-item custom-dropdown-item" data-action="delete">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                <path d="M3 6h18"></path>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
                <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                <line x1="10" y1="11" x2="10" y2="17"></line>
                <line x1="14" y1="11" x2="14" y2="17"></line>
                    </svg>
            Delete
        </div>
    `;
    
    // Append the dropdown to the document body
    document.body.appendChild(dropdown);
    
    // Add event listeners to dropdown items
    const dropdownItems = dropdown.querySelectorAll('.dropdown-item');
    dropdownItems.forEach(item => {
        item.addEventListener('click', function() {
            const action = this.getAttribute('data-action');
            
            switch (action) {
                case 'edit':
                    editItem(itemId, row);
                    break;
                case 'duplicate':
                    duplicateItem(itemId, row);
                    break;
                case 'delete':
                    deleteItem(itemId, row);
                    break;
            }
            
            // Remove dropdown after selection
            dropdown.remove();
        });
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function closeDropdown(e) {
        if (!dropdown.contains(e.target) && e.target !== button && !e.target.closest('.tree-action-btn[data-action="more"]')) {
            dropdown.remove();
            document.removeEventListener('click', closeDropdown);
        }
    });
}

// Edit item function
function editItem(id, row) {
    console.log("Editing item", id);
    
    const itemType = row.classList.contains('folder-row') ? 'folder' : 'category';
    const nameElement = row.querySelector('.category-name');
    const currentName = nameElement.textContent;
    
    // Create modal for editing
    const modal = document.createElement('div');
    modal.className = 'edit-modal';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modal.style.display = 'flex';
    modal.style.justifyContent = 'center';
    modal.style.alignItems = 'center';
    modal.style.zIndex = '1000';
    
    const modalContent = document.createElement('div');
    modalContent.style.width = '400px';
    modalContent.style.backgroundColor = 'var(--card-color)';
    modalContent.style.borderRadius = '8px';
    modalContent.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.3)';
    modalContent.style.padding = '20px';
    modalContent.style.color = 'var(--text-color)';
    
    const modalHeader = document.createElement('div');
    modalHeader.style.display = 'flex';
    modalHeader.style.justifyContent = 'space-between';
    modalHeader.style.alignItems = 'center';
    modalHeader.style.marginBottom = '20px';
    
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = `Edit ${itemType === 'folder' ? 'Folder' : 'Category'}`;
    modalTitle.style.margin = '0';
    
    const closeBtn = document.createElement('button');
    closeBtn.type = 'button';
    closeBtn.innerHTML = '&times;';
    closeBtn.style.background = 'none';
    closeBtn.style.border = 'none';
    closeBtn.style.fontSize = '24px';
    closeBtn.style.cursor = 'pointer';
    closeBtn.style.color = 'var(--text-color)';
    closeBtn.onclick = () => modal.remove();
    
    const editContent = document.createElement('div');
    editContent.innerHTML = `
        <div style="margin-bottom: 20px;">
            <label style="display: block; margin-bottom: 8px; font-weight: 500;">Name</label>
            <input type="text" id="itemName" value="${currentName}" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid var(--border-color); background-color: rgba(255, 255, 255, 0.05); color: var(--text-color);">
        </div>
        
        <div style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px;">
            <button type="button" class="btn btn-outline" style="padding: 8px 16px;">Cancel</button>
            <button type="button" class="btn btn-primary" style="padding: 8px 16px;">Save Changes</button>
        </div>
    `;
    
    modalHeader.appendChild(modalTitle);
    modalHeader.appendChild(closeBtn);
    modalContent.appendChild(modalHeader);
    modalContent.appendChild(editContent);
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // Add event listeners to buttons in the modal
    const cancelBtn = modalContent.querySelector('.btn-outline');
    const saveBtn = modalContent.querySelector('.btn-primary');
    const nameInput = modalContent.querySelector('#itemName');
    
    cancelBtn.addEventListener('click', () => modal.remove());
    saveBtn.addEventListener('click', () => {
        if (nameInput.value.trim() === '') {
            showNotification('Please enter a name', 'error');
            return;
        }
        
        const newName = nameInput.value.trim();
        
        // Update UI
        nameElement.textContent = newName;
        
        // Update data structure
        if (selectedBookId && bookCategories.has(selectedBookId)) {
            const item = bookCategories.get(selectedBookId).get(id);
            if (item) {
                item.name = newName;
                item.updatedAt = new Date().toISOString();
                
                // Save data
                saveData();
                
                showNotification(`${itemType === 'folder' ? 'Folder' : 'Category'} updated successfully`, 'success');
            }
        }
        
        modal.remove();
    });
}

// Duplicate item function
function duplicateItem(id, row) {
    console.log("Duplicating item", id);
    
    if (!selectedBookId || !bookCategories.has(selectedBookId)) {
        showNotification('Cannot duplicate: Book not found', 'error');
        return;
    }
    
    const original = bookCategories.get(selectedBookId).get(id);
    if (!original) {
        showNotification('Cannot duplicate: Item not found', 'error');
        return;
    }
    
    // Create new ID for the duplicate
    const newId = `${original.type || 'category'}-${Date.now()}`;
    
    // Create duplicate object
    const duplicate = {
        ...original,
        id: newId,
        name: `${original.name} (copy)`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    // Add to data structure
    bookCategories.get(selectedBookId).set(newId, duplicate);
    
    // Save data
    saveData();
    
    // Insert into UI
    const contentTable = document.querySelector('.content-table tbody');
    const newRow = row.cloneNode(true);
    newRow.setAttribute('data-category-id', newId);
    
    // Update name in the new row
    const nameElement = newRow.querySelector('.category-name');
    nameElement.textContent = duplicate.name;
    
    // Update date in the new row
    const dateCell = newRow.querySelector('td:nth-child(3)');
    dateCell.textContent = new Date().toLocaleDateString();
    
    // Insert after the original
    row.insertAdjacentElement('afterend', newRow);
    
    // Attach event listeners
    attachTreeEventListeners(newRow);
    
    showNotification('Item duplicated successfully', 'success');
}

// Delete item function
function deleteItem(id, row) {
    console.log("Deleting item", id);
    
    // Create confirmation modal
    const modal = document.createElement('div');
    modal.className = 'delete-modal';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    modal.style.display = 'flex';
    modal.style.justifyContent = 'center';
    modal.style.alignItems = 'center';
    modal.style.zIndex = '1000';
    
    const modalContent = document.createElement('div');
    modalContent.style.width = '400px';
    modalContent.style.backgroundColor = 'var(--card-color)';
    modalContent.style.borderRadius = '8px';
    modalContent.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.3)';
    modalContent.style.padding = '20px';
    modalContent.style.color = 'var(--text-color)';
    
    modalContent.innerHTML = `
        <div style="text-align: center; margin-bottom: 20px;">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#ff4444" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-bottom: 15px;">
                <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
                <line x1="12" y1="9" x2="12" y2="13"></line>
                <line x1="12" y1="17" x2="12.01" y2="17"></line>
            </svg>
            <h2 style="margin: 0; margin-bottom: 10px;">Confirm Deletion</h2>
            <p style="color: var(--text-secondary); margin: 0 0 15px 0;">Are you sure you want to delete this item? This action cannot be undone.</p>
        </div>
        <div style="display: flex; justify-content: center; gap: 10px;">
            <button type="button" class="btn btn-outline" style="padding: 8px 16px; flex: 1;">Cancel</button>
            <button type="button" class="btn btn-primary" style="padding: 8px 16px; background-color: #ff4444; flex: 1;">Delete</button>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.appendChild(modalContent);
    
    // Add event listeners
    const cancelBtn = modalContent.querySelector('.btn-outline');
    const deleteBtn = modalContent.querySelector('.btn-primary');
    
    cancelBtn.addEventListener('click', () => modal.remove());
    deleteBtn.addEventListener('click', () => {
        // Get indent level of the row being deleted
        const indentLevel = parseInt(row.getAttribute('data-indent') || '0');
        
        // Remove item from data structure
        if (selectedBookId && bookCategories.has(selectedBookId)) {
            bookCategories.get(selectedBookId).delete(id);
            
            // Save data
            saveData();
        }
        
        // Remove row from UI
        let next = row.nextElementSibling;
        row.remove();
        
        // Remove children if they exist
        while (next) {
            const nextIndent = parseInt(next.getAttribute('data-indent') || '0');
            if (nextIndent <= indentLevel) {
                break;
            }
            
            const temp = next.nextElementSibling;
            next.remove();
            next = temp;
        }
        
        showNotification('Item deleted successfully', 'success');
        modal.remove();
    });
}

// Function to select a book
function selectBook(bookId) {
    selectedBookId = bookId;
    
    // Update the UI to reflect the selected book
    document.querySelectorAll('.book-item').forEach(book => {
        const id = book.getAttribute('data-book-id');
        if (id === bookId) {
            book.classList.add('active');
        } else {
            book.classList.remove('active');
        }
    });
    
    // Save the selected book ID to localStorage
    localStorage.setItem('selectedBookId', selectedBookId);
    
    // Show the book's content (this will create the content table)
    showMyBooksPage();
    
    // Check if we're on the Analytics page and refresh it
    const analyticsIcon = document.querySelector('.icon-link[title="Analytics"]');
    if (analyticsIcon && analyticsIcon.classList.contains('active')) {
        // We're on the analytics page, refresh it
        showAnalyticsPage();
    }
}

// Function for saving an article
function saveArticle(articleId, title, content, status) {
    if (!selectedBookId || !articleId) return;
    
            const categories = bookCategories.get(selectedBookId);
            if (!categories) return;
            
            const article = categories.get(articleId);
            if (!article) return;
            
            // Update article data
            article.name = title;
            article.content = content;
            article.status = status;
            article.updatedAt = new Date().toISOString();
            
    // Update in the map
    categories.set(articleId, article);
    
    // Save to localStorage
            saveData();
            
    // Show notification
    showNotification('Article saved successfully!');
    
    // Close editor
    const editor = document.getElementById('articleEditor');
    if (editor) {
        editor.classList.remove('active');
    }
    
    // Refresh the view
    showMyBooksPage();
}

// Function to create demo data if needed
function createDemoDataIfNeeded() {
    console.log('Checking if demo data is needed...');
    
    // Check if we have existing data
    const storedBooks = localStorage.getItem('kb_books');
    const demoCreated = localStorage.getItem('demoContentCreated');
    
    if (!storedBooks || books.size === 0 || demoCreated !== 'true') {
        console.log('No existing data found or demo not created yet, creating demo data...');
        
        // Clear existing data to ensure a clean demo setup
        localStorage.removeItem('kb_books');
        localStorage.removeItem('kb_categories');
        localStorage.removeItem('selectedBookId');
        
        // Reset in-memory data
        books = new Map();
        bookCategories = new Map();
        selectedBookId = null;
        
        // Create demo data
        createDemoData();
        
        // Mark demo content as created
        localStorage.setItem('demoContentCreated', 'true');
        
        // Show welcome notification
        showNotification('Welcome to Knowledge Base! Demo content has been created for you.', 'success');
    } else {
        console.log('Demo data already exists, skipping creation.');
    }
}

// Function to show notification
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Show notification
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    // Hide and remove notification after 3 seconds
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// Filter content based on search query
function filterContent(query) {
    const rows = document.querySelectorAll('.content-table tbody tr');
    
    rows.forEach(row => {
        if (!query) {
            row.style.display = ''; // Show all rows when query is empty
            return;
        }
        
        const title = row.querySelector('.category-name')?.textContent.toLowerCase() || '';
        if (title.includes(query)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

// Filter content by type (all, published, draft)
function filterByType(type) {
    const rows = document.querySelectorAll('.content-table tbody tr');
    
    rows.forEach(row => {
        if (type === 'all') {
            row.style.display = '';
            return;
        }
        
        const statusEl = row.querySelector('.status-tag');
        if (!statusEl) {
            row.style.display = '';
        return;
    }
    
        const status = statusEl.textContent.toLowerCase();
        if (type === status || (type === 'published' && !statusEl.classList.contains('draft'))) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

// Setup search inputs and action buttons
function setupSearchAndButtonListeners() {
    // Search functionality
    const searchInputs = document.querySelectorAll('.search-input');
    searchInputs.forEach(searchInput => {
        // Check if this input already has a listener
        if (!searchInput.hasSearchListener) {
        searchInput.addEventListener('input', function(e) {
            const query = e.target.value.toLowerCase();
            filterContent(query);
        });
            searchInput.hasSearchListener = true;
    }
    });
    
    // Add content button
    const addContentBtn = document.querySelector('.btn-add');
    if (addContentBtn && !addContentBtn.hasClickListener) {
        addContentBtn.addEventListener('click', function(event) {
            showAddNewMenu(this);
        });
        addContentBtn.hasClickListener = true;
    }
    
    // URL Copy Button
    const copyUrlBtn = document.getElementById('copy-url-button');
    if (copyUrlBtn && !copyUrlBtn.hasClickListener) {
        copyUrlBtn.addEventListener('click', function() {
            const url = document.getElementById('kb-current-url').textContent;
            navigator.clipboard.writeText(url).then(() => {
                showNotification('URL copied to clipboard', 'success');
            });
        });
        copyUrlBtn.hasClickListener = true;
    }
} 

// Function to create demo content when the extension first launches
function createDemoContent() {
    console.log("Creating demo content for first launch");
    
    // Check if demo content has already been created
    if (localStorage.getItem('demoContentCreated')) {
        return; // Demo content already exists, don't recreate
    }
    
    // Create sample books
    const bookId1 = 'book-demo-1';
    const bookId2 = 'book-demo-2';
    
    // Add sample books
    const books = new Map([
        [bookId1, {
            id: bookId1,
            name: 'Knowledge Base Guide',
            description: 'Learn how to use the Knowledge Base extension',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        }],
        [bookId2, {
            id: bookId2,
            name: 'Project Documentation',
            description: 'Sample project documentation structure',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        }]
    ]);
    
    // Store books
    localStorage.setItem('books', JSON.stringify([...books]));
    
    // Create categories, folders, articles for Book 1 (Knowledge Base Guide)
    const book1Categories = new Map();
    
    // Getting Started Category
    const gettingStartedId = 'category-demo-1';
    book1Categories.set(gettingStartedId, {
        id: gettingStartedId,
        name: 'Getting Started',
        type: 'category',
        bookId: bookId1,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Welcome Article
    const welcomeArticleId = 'article-demo-1';
    book1Categories.set(welcomeArticleId, {
        id: welcomeArticleId,
        name: 'Welcome to Knowledge Base',
        type: 'article',
        parentId: gettingStartedId,
        bookId: bookId1,
        content: 'Welcome to Knowledge Base! This tool helps you organize and manage your information efficiently. You can create books, categories, folders, articles, and upload files.',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'published'
    });
    
    // How-to Guide Article
    const howToArticleId = 'article-demo-2';
    book1Categories.set(howToArticleId, {
        id: howToArticleId,
        name: 'How to Use Knowledge Base',
        type: 'article',
        parentId: gettingStartedId,
        bookId: bookId1,
        content: 'Knowledge Base is structured hierarchically:\n\n1. Books are your main collections\n2. Books contain Categories for broad topics\n3. Categories contain Folders, Articles or Files\n4. Folders can contain more Folders, Articles or Files\n\nTo add new content, click the "Add new" button and select what you want to create.',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'published'
    });
    
    // FAQ Category
    const faqCategoryId = 'category-demo-2';
    book1Categories.set(faqCategoryId, {
        id: faqCategoryId,
        name: 'FAQ',
        type: 'category',
        bookId: bookId1,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // FAQ Article 1
    const faqArticleId1 = 'article-demo-3';
    book1Categories.set(faqArticleId1, {
        id: faqArticleId1,
        name: 'How do I create a new book?',
        type: 'article',
        parentId: faqCategoryId,
        bookId: bookId1,
        content: 'To create a new book, click the "Add new" button and select "Book". Enter the book name and optional description, then click Create.',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'published'
    });
    
    // FAQ Article 2
    const faqArticleId2 = 'article-demo-4';
    book1Categories.set(faqArticleId2, {
        id: faqArticleId2,
        name: 'How do I organize my content?',
        type: 'article',
        parentId: faqCategoryId,
        bookId: bookId1,
        content: 'Best practice is to create categories for broad topics, folders for subtopics, and articles for specific content. You can rearrange items by dragging and dropping them in the tree view.',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'published'
    });
    
    // Create categories, folders, articles for Book 2 (Project Documentation)
    const book2Categories = new Map();
    
    // Overview Category
    const overviewCategoryId = 'category-demo-3';
    book2Categories.set(overviewCategoryId, {
        id: overviewCategoryId,
        name: 'Project Overview',
        type: 'category',
        bookId: bookId2,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // Overview Article
    const overviewArticleId = 'article-demo-5';
    book2Categories.set(overviewArticleId, {
        id: overviewArticleId,
        name: 'Project Introduction',
        type: 'article',
        parentId: overviewCategoryId,
        bookId: bookId2,
        content: 'This is a sample project documentation structure. You can use this as a template for your own projects.',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'published'
    });
    
    // Technical Specs Category
    const techSpecsCategoryId = 'category-demo-4';
    book2Categories.set(techSpecsCategoryId, {
        id: techSpecsCategoryId,
        name: 'Technical Specifications',
        type: 'category',
        bookId: bookId2,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // API Folder
    const apiFolderId = 'folder-demo-1';
    book2Categories.set(apiFolderId, {
        id: apiFolderId,
        name: 'API Documentation',
        type: 'folder',
        parentId: techSpecsCategoryId,
        bookId: bookId2,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    });
    
    // API Article
    const apiArticleId = 'article-demo-6';
    book2Categories.set(apiArticleId, {
        id: apiArticleId,
        name: 'REST API Overview',
        type: 'article',
        parentId: apiFolderId,
        bookId: bookId2,
        content: 'This is a sample API documentation article. You can document your API endpoints, parameters, and responses here.',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'published'
    });
    
    // Store all categories
    bookCategories.set(bookId1, book1Categories);
    bookCategories.set(bookId2, book2Categories);
    
    // Save data to localStorage
    saveData();
    
    // Mark demo content as created
    localStorage.setItem('demoContentCreated', 'true');
    
    // Set initial selected book
    selectedBookId = bookId1;
    localStorage.setItem('selectedBookId', selectedBookId);
    
    console.log("Demo content created successfully");
}

// Function to inject custom styles for the tree view
function injectTreeStyles() {
    // Check if styles have already been added
    if (document.getElementById('tree-view-styles')) {
        return;
    }
    
    // Create style element
    const styleElement = document.createElement('style');
    styleElement.id = 'tree-view-styles';
    
    // Add styles
    styleElement.textContent = `
        /* Tree View Styles */
        .content-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 16px;
        }
        
        .content-table thead th {
            color: var(--text-secondary);
            font-weight: 500;
            text-align: left;
            padding: 8px 16px;
            border-bottom: 1px solid var(--border-color);
            font-size: 13px;
        }
        
        .content-table tbody tr {
            cursor: pointer;
            transition: background-color 0.15s ease;
        }
        
        .content-table tbody tr:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        .content-table tbody td {
            padding: 8px 16px;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-primary);
            font-size: 14px;
        }
        
        .tree-item {
            display: flex;
            align-items: center;
            gap: 8px;
            position: relative;
            min-height: 42px;
        }
        
        .expand-icon {
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 18px;
            height: 18px;
            font-size: 9px;
            transition: transform 0.15s ease;
            color: var(--text-secondary);
        }
        
        .expand-icon.open {
            transform: rotate(90deg);
        }
        
        .category-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            color: var(--text-secondary);
        }
        
        .category-name {
            font-size: 14px;
            color: var(--text-primary);
        }
        
        .book-row .category-name {
            font-weight: 600;
            font-size: 15px;
        }
        
        .tree-actions {
            margin-left: auto;
            display: none;
            gap: 4px;
        }
        
        .tree-item:hover .tree-actions {
            display: flex;
        }
        
        .action-button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--text-secondary);
            padding: 4px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }
        
        .action-button:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--text-primary);
        }
        
        .status-tag {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 4px 8px;
            font-size: 12px;
            border-radius: 4px;
            text-transform: capitalize;
        }
        
        .status-tag.draft {
            background-color: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }
        
        .status-tag.published {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        
        .article-count {
            font-size: 12px;
            color: var(--text-tertiary);
            margin-left: 8px;
        }
        
        .performance-stats {
            display: flex;
            gap: 16px;
        }
        
        .performance-stats span {
            font-size: 13px;
            color: var(--text-secondary);
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
        }
        
        .empty-state p {
            font-size: 15px;
            color: var(--text-secondary);
            margin: 0;
        }
    `;
    
    // Add to document head
    document.head.appendChild(styleElement);
}

// Function to create the content table structure
function createContentTable() {
    if (!contentContainer) {
        console.error("Content container not found. Cannot create content table.");
        return null;
    }

    // Create search and actions
    const searchActions = document.createElement('div');
    searchActions.className = 'search-actions';
    searchActions.innerHTML = `
        <div>
            <input type="text" class="search-input" placeholder="Find content...">
        </div>
        <div class="actions">
            <button type="button" class="btn btn-outline">Import</button>
            <button type="button" class="btn btn-primary btn-add">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 5l0 14"></path>
                    <path d="M5 12l14 0"></path>
                    </svg>
                Add new
            </button>
            </div>
        `;
    contentContainer.appendChild(searchActions);

    // Create content table structure
    const contentTable = document.createElement('table');
    contentTable.className = 'content-table';
    contentTable.innerHTML = `
        <thead>
            <tr>
                <th style="width: 50%">Title</th>
                <th>Status</th>
                <th>Last updated</th>
                <th>Performance</th>
            </tr>
        </thead>
        <tbody></tbody>
    `;
    contentContainer.appendChild(contentTable);
    
    // Add event listener to the new "Add new" button
    const addNewButton = searchActions.querySelector('.btn-add');
    if (addNewButton) {
        addNewButton.addEventListener('click', function(event) {
            showAddNewMenu(this);
            event.stopPropagation(); // Prevent event from bubbling up
        });
    }
    
    return contentTable;
}

function showMyBooksPage() {
    if (!contentContainer || !contentTitle) {
        console.error("Content container or title element not found");
        return;
    }
    
    console.log("Showing My Books Page for bookId:", selectedBookId);
    
    // Set title based on selected book
    if (selectedBookId && books.has(selectedBookId)) {
        const selectedBook = books.get(selectedBookId);
        contentTitle.textContent = selectedBook.name;
        console.log("Setting content title to:", selectedBook.name);
    } else {
        contentTitle.textContent = "My Books";
        console.warn("No book selected or book not found, defaulting to 'My Books'");
    }
    
    // Create content table
    const contentTable = document.createElement('table');
    contentTable.className = 'content-table';
    contentTable.innerHTML = `
        <thead>
            <tr>
                <th style="width: 50%">Title</th>
                <th>Status</th>
                <th>Last updated</th>
                <th>Performance</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    `;
    
    // Clear main content
    contentContainer.innerHTML = '';
    
    // Add the URL info and search bar sections back
    const urlWrapper = document.createElement('div');
    urlWrapper.className = 'kb-url-wrapper';
    urlWrapper.innerHTML = `
        <div class="url-container">
            <svg class="url-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="m7.272 13.783.561.07V11.5h-.5a.837.837 0 0 1-.833-.833v-.874l-.146-.147L5.207 8.5h4.126c.09 0 .167.076.167.167v2.5h1.167c.373 0 .68.237.79.58l.263.82.582-.636A5.805 5.805 0 0 0 13.833 8a5.836 5.836 0 0 0-3.645-5.403l-.688-.28v1.016a.837.837 0 0 1-.833.834H6.833V6c0 .09-.076.167-.166.167H4.833v1.959L3.16 6.453l-.642-.643-.2.887A5.91 5.91 0 0 0 2.168 8a5.826 5.826 0 0 0 5.105 5.783ZM1.833 8A6.17 6.17 0 0 1 8 1.833 6.17 6.17 0 0 1 14.167 8 6.17 6.17 0 0 1 8 14.167 6.17 6.17 0 0 1 1.833 8Z" fill="#0066FF" stroke="#0066FF"/>
            </svg>
            <span class="url-text" id="kb-current-url">article-link</span>
            <button aria-label="Copy Help Center Link" class="round-button" id="copy-url-button">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.667 1.5h-.5v9.333h-.334V2c0-.457.377-.833.834-.833h7.5V1.5h-7.5Zm1.84 3.167c0-.46.372-.834.826-.834h4.46L13.5 7.54V14a.837.837 0 0 1-.833.833h-7.34A.832.832 0 0 1 4.5 14l.007-9.333ZM4.833 14v.5h8.334v-7H9.833V4.167h-5V14Z" fill="#62626D" stroke="#62626D"/>
                </svg>
            </button>
                </div>
        <div class="toggle-container">
            <div class="switch-wrapper">
                <button type="button" role="switch" aria-checked="true" class="ant-switch ant-switch-checked">
                    <div class="ant-switch-handle"></div>
                </button>
                </div>
        </div>
    `;
    
    const searchActions = document.createElement('div');
    searchActions.className = 'search-actions';
    searchActions.innerHTML = `
        <div>
            <input type="text" class="search-input" placeholder="Find content...">
        </div>
        <div class="actions">
            <button type="button" class="btn btn-outline">Import</button>
            <button type="button" class="btn btn-primary btn-add" id="addNewBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 5l0 14"></path>
                    <path d="M5 12l14 0"></path>
                </svg>
                Add new
            </button>
        </div>
    `;
    
    // Add workspace wrapper (title and status)
    const workspaceWrapper = document.createElement('div');
    workspaceWrapper.className = 'workspace-wrapper';
    workspaceWrapper.innerHTML = `
        <div class="workspace-select">
            <div class="selected-workspace">
                <span class="selected-workspace-name">${contentTitle.textContent}</span>
            </div>
            <div class="workspace-status">
                <span class="status-dot"></span>
                <span>Live / Publicly available</span>
            </div>
        </div>
    `;
    
    contentContainer.appendChild(workspaceWrapper);
    contentContainer.appendChild(urlWrapper);
    contentContainer.appendChild(searchActions);
    contentContainer.appendChild(contentTable);
    
    // Get categories for selected book
    const tableBody = contentTable.querySelector('tbody');
    
    if (selectedBookId && bookCategories.has(selectedBookId)) {
        const categories = bookCategories.get(selectedBookId);
        
        console.log(`Rendering content for book ${selectedBookId} with ${categories.size} entries`);
        
        // First render top-level categories
        const topLevelCategories = Array.from(categories.values()).filter(item => 
            !item.parentId && item.type === 'category'
        );
        
        console.log(`Found ${topLevelCategories.length} top-level categories`);
        
        for (const category of topLevelCategories) {
            // Auto-expand top-level categories by default
            category.autoExpand = true;
            renderTreeItem(category, 0, tableBody);
        }
        
        // Then render items without parents that aren't categories
        const orphanedItems = Array.from(categories.values()).filter(item => 
            !item.parentId && item.type !== 'category'
        );
        
        console.log(`Found ${orphanedItems.length} orphaned items`);
        
        for (const item of orphanedItems) {
            renderTreeItem(item, 0, tableBody);
        }
        
        // If no content was rendered, show an empty state
        if (tableBody.children.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="4" class="empty-state">
                        <p>This book is empty. Click "Add new" to add content.</p>
                    </td>
                </tr>
            `;
        }
    } else if (books.size > 0) {
        // No book selected, show empty state with message
        tableBody.innerHTML = `
            <tr>
                <td colspan="4" class="empty-state">
                    <p>Select a book from the sidebar to view its contents</p>
                </td>
            </tr>
        `;
    } else {
        // No books at all, show empty state with message
        tableBody.innerHTML = `
            <tr>
                <td colspan="4" class="empty-state">
                    <p>You don't have any books yet. Click "Add new" to create your first book.</p>
                </td>
            </tr>
        `;
    }
    
    // Add event listener to the "Add new" button
    const addNewBtn = contentContainer.querySelector('#addNewBtn');
    if (addNewBtn) {
        addNewBtn.addEventListener('click', function() {
            showAddNewMenu(this);
        });
    }
    
    // Setup search functionality
    setupSearchAndButtonListeners();
    
    // Function to render a tree item (category, folder, article, file)
    function renderTreeItem(item, indentLevel = 0, tableBody) {
        const row = document.createElement('tr');
        row.className = `${item.type}-row`;
        row.setAttribute('data-id', item.id);
        row.setAttribute('data-indent', indentLevel);
        row.setAttribute('data-type', item.type);
        
        const dateOptions = { month: 'numeric', day: 'numeric', year: 'numeric' };
        const formattedDate = item.updatedAt 
            ? new Date(item.updatedAt).toLocaleDateString(undefined, dateOptions) 
            : '';
            
        let expandButton = '';
        let treeActions = `
            <div class="tree-actions">
                <button class="tree-action-btn edit-btn" title="Edit">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                    </svg>
                </button>
                <button class="tree-action-btn duplicate-btn" title="Duplicate">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                    </svg>
                </button>
                <button class="tree-action-btn delete-btn" title="Delete">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M3 6h18"></path>
                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
                        <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                    </svg>
                </button>
            </div>
        `;
        
        // For categories and folders, add expand/collapse button
        if (item.type === 'category' || item.type === 'folder') {
            expandButton = `
                <div class="expandable-control">
                    <div class="expand-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="9 18 15 12 9 6"></polyline>
                        </svg>
                    </div>
                </div>
            `;
        }
        
        let icon = '';
        
        // Set icon based on item type
        switch(item.type) {
            case 'category':
                icon = `
                    <span class="category-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path>
                        </svg>
                    </span>
                `;
                break;
            case 'folder':
                icon = `
                    <span class="folder-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#ff9744" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M3 7v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2h-9a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2z"></path>
                        </svg>
                    </span>
                `;
                break;
            case 'article':
                icon = `
                    <span class="article-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <polyline points="14 2 14 8 20 8"></polyline>
                            <line x1="16" y1="13" x2="8" y2="13"></line>
                            <line x1="16" y1="17" x2="8" y2="17"></line>
                            <polyline points="10 9 9 9 8 9"></polyline>
                        </svg>
                    </span>
                `;
                break;
            case 'file':
                icon = `
                    <span class="file-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#6c757d" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
                            <polyline points="13 2 13 9 20 9"></polyline>
                        </svg>
                    </span>
                `;
                break;
        }
        
        // For articles, show status tag
        let status = '';
        if (item.type === 'article') {
            status = `
                <span class="status-tag ${item.status || 'draft'}">${item.status || 'Draft'}</span>
            `;
        }
        
        // Show performance stats for articles only
        let performance = '';
        if (item.type === 'article') {
            performance = `
                <div class="performance-stats">
                    <span>Views: ${Math.floor(Math.random() * 100)}</span>
                    <span>Reactions: ${Math.floor(Math.random() * 10)}</span>
            </div>
        `;
        }
        
        row.innerHTML = `
            <td class="tree-item" data-indent="${indentLevel}">
                ${expandButton}
                ${icon}
                <span class="${item.type}-name">${item.name}</span>
                ${treeActions}
            </td>
            <td>${status}</td>
            <td>${formattedDate}</td>
            <td>${performance}</td>
        `;
        
        // Add event listener to expand/collapse for categories and folders
        if (item.type === 'category' || item.type === 'folder') {
            const expandIcon = row.querySelector('.expand-icon');
            if (expandIcon) {
                expandIcon.addEventListener('click', function(e) {
                    e.stopPropagation();
                    this.classList.toggle('open');
                    
                    const row = this.closest('tr');
                    const itemId = row.getAttribute('data-id');
                    
                    // Find next rows with higher indent level
                    let next = row.nextElementSibling;
                    let isVisible = this.classList.contains('open');
                    
                    while (next) {
                        if (parseInt(next.getAttribute('data-indent') || '0') <= parseInt(row.getAttribute('data-indent') || '0')) {
                            break;
                        }
                        
                        next.style.display = isVisible ? '' : 'none';
                        next = next.nextElementSibling;
                    }
                });
            }
        }
        
        // Add click events for edit, duplicate, delete buttons
        const editBtn = row.querySelector('.edit-btn');
        if (editBtn) {
            editBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                editItem(item.id, row);
            });
        }
        
        const duplicateBtn = row.querySelector('.duplicate-btn');
        if (duplicateBtn) {
            duplicateBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                duplicateItem(item.id, row);
            });
        }
        
        const deleteBtn = row.querySelector('.delete-btn');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                deleteItem(item.id, row);
            });
        }
        
        // First add the current row to the table
        tableBody.appendChild(row);
        
        // If this item has children, recursively render them right after the parent
        if ((item.type === 'category' || item.type === 'folder') && bookCategories.has(selectedBookId)) {
            const categoryMap = bookCategories.get(selectedBookId);
            
            // Get children, but if parent is a category, don't include other categories as children
            const children = Array.from(categoryMap.values()).filter(child => {
                if (child.parentId !== item.id) return false;
                
                // Categories cannot have other categories as children
                if (item.type === 'category' && child.type === 'category') return false;
                
                return true;
            });
            
            // Sort children: folders first, then articles, then files
            children.sort((a, b) => {
                const typeOrder = { 'folder': 1, 'article': 2, 'file': 3 };
                if (typeOrder[a.type] !== typeOrder[b.type]) {
                    return typeOrder[a.type] - typeOrder[b.type];
                }
                return a.name.localeCompare(b.name);
            });
            
            row.setAttribute('data-has-children', children.length > 0 ? 'true' : 'false');
            
            // Set auto-expand state
            const shouldExpand = item.autoExpand === true;
            if (shouldExpand && row.querySelector('.expand-icon')) {
                row.querySelector('.expand-icon').classList.add('open');
            }
            
            // Render children right after the parent
            for (const child of children) {
                // Recursively render each child
                renderTreeItem(child, indentLevel + 1, tableBody);
                
                // Hide children initially if parent is not auto-expanded
                if (!shouldExpand) {
                    const childRow = tableBody.querySelector(`tr[data-id="${child.id}"]`);
                    if (childRow) {
                    childRow.style.display = 'none';
                    }
                }
            }
        }
        
        // We don't return the row anymore since we're appending it directly
        return row;
    }
    
    // After all book and category rendering is complete
    // Dispatch a custom event to notify that the content table has been updated
    document.dispatchEvent(new CustomEvent('contentTableUpdated'));
} 

// Function to inspect and debug the books data
function debugBooks() {
    console.log("🔍 DEBUG: Inspecting books data...");
    
    // Current books in memory
    console.log("📚 Books in memory:", books);
    console.log("📚 Books count:", books.size);
    console.log("📚 Book categories:", bookCategories);
    
    // Log selected book
    console.log("📖 Selected book ID:", selectedBookId);
    if (selectedBookId) {
        console.log("📖 Selected book data:", books.get(selectedBookId));
    }
    
    // Local storage data
    console.log("💾 Local Storage - kb_books:", localStorage.getItem('kb_books'));
    console.log("💾 Local Storage - selectedBookId:", localStorage.getItem('selectedBookId'));
    
    return {
        reset: function() {
            console.log("🔄 Calling resetData function...");
            resetData();
            return "Data reset successful!";
        }
    };
}

// Helper function to create category select dropdown for adding folders/articles/files
function createCategorySelect(defaultParentId = null) {
    const select = document.createElement('select');
    select.id = 'parentCategory';
    select.style.width = '100%';
    select.style.padding = '10px';
    select.style.borderRadius = 'var(--border-radius)';
    select.style.border = '1px solid var(--border-color)';
    select.style.backgroundColor = 'var(--background-color)';
    select.style.color = 'var(--text-color)';
    select.required = true;
    
    // Create option groups
    const categoryGroup = document.createElement('optgroup');
    categoryGroup.label = 'Categories';
    
    const folderGroup = document.createElement('optgroup');
    folderGroup.label = 'Folders';
    
    // Add all valid parents
    if (selectedBookId && bookCategories.has(selectedBookId)) {
        const items = Array.from(bookCategories.get(selectedBookId).values());
        
        // Add categories first
        const categories = items.filter(item => item.type === 'category');
        categories.sort((a, b) => a.name.localeCompare(b.name));
        
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            
            if (defaultParentId === category.id) {
                option.selected = true;
            }
            
            categoryGroup.appendChild(option);
        });
        
        // Add folders
        const folders = items.filter(item => item.type === 'folder');
        folders.sort((a, b) => a.name.localeCompare(b.name));
        
        folders.forEach(folder => {
            const option = document.createElement('option');
            option.value = folder.id;
            option.textContent = folder.name;
            
            if (defaultParentId === folder.id) {
                option.selected = true;
            }
            
            folderGroup.appendChild(option);
        });
    }
    
    // Add the option groups if they have children
    if (categoryGroup.children.length > 0) {
        select.appendChild(categoryGroup);
    }
    
    if (folderGroup.children.length > 0) {
        select.appendChild(folderGroup);
    }
    
    return select;
}

// Function to reset data and create fresh demo data
function resetData() {
    console.log("🔄 Resetting all data...");
    localStorage.removeItem('kb_books');
    localStorage.removeItem('kb_categories');
    localStorage.removeItem('selectedBookId');
    localStorage.removeItem('demoContentCreated');
    
    // Reset in-memory data
    books = new Map();
    bookCategories = new Map();
    selectedBookId = null;
    
    // Create fresh demo data
    createDemoData();
    
    // Update UI
    updateBooksSidebar();
    showMyBooksPage();
    
    console.log("✅ Data reset complete!");
    showNotification("Knowledge Base has been reset with a new structure", "success");
} 

// Function to show the Analytics page
function showAnalyticsPage() {
    if (!contentContainer || !contentTitle) {
        console.error("Content container or title element not found");
        return;
    }
    
    console.log("Showing Analytics Page");
    
    // Set page title
    contentTitle.textContent = "Analytics";
    
    // Clear main content
    contentContainer.innerHTML = '';
    
    // Create analytics content
    const analyticsContent = document.createElement('div');
    analyticsContent.className = 'analytics-content';
    analyticsContent.style.padding = '20px';
    
    // Check if there's a specific book selected
    let booksToShow = [];
    let displayTitle = "";
    
    if (selectedBookId && books.has(selectedBookId)) {
        // Show analytics for the specific selected book
        booksToShow = [books.get(selectedBookId)];
        displayTitle = `"${books.get(selectedBookId).name}"`;
    } else {
        // Show analytics for all books in the current filter
        let filterName = "All Books";
        
        if (selectedFilterCategory === 'all-books') {
            // Show all books
            booksToShow = Array.from(books.values());
        } else if (bookFilters.has(selectedFilterCategory)) {
            // Show only books in the selected filter
            booksToShow = bookFilters.get(selectedFilterCategory);
            // Get filter display name
            const filterElement = document.querySelector(`.filter-item[data-filter="${selectedFilterCategory}"]`);
            if (filterElement) {
                filterName = filterElement.querySelector('.nav-title').textContent;
            }
        }
        
        displayTitle = `"${filterName}"`;
    }
    
    // Add header with info text
    const header = document.createElement('div');
    header.style.marginBottom = '30px';
    header.innerHTML = `
        <h2 style="margin-bottom: 10px; font-size: 24px; font-weight: 500;">Analytics for ${displayTitle}</h2>
        <p style="color: var(--text-secondary); margin-bottom: 20px;">
            Track performance, engagement, and usage metrics for your knowledge base content.
            ${booksToShow.length === 0 ? '<br><span style="color: #ff9744;">No books in this filter. Analytics data may be limited.</span>' : ''}
        </p>
    `;
    
    // Add source indicator to show what's being analyzed
    const sourceIndicator = document.createElement('div');
    sourceIndicator.style.display = 'flex';
    sourceIndicator.style.alignItems = 'center';
    sourceIndicator.style.gap = '10px';
    sourceIndicator.style.padding = '12px 15px';
    sourceIndicator.style.backgroundColor = 'rgba(100, 197, 255, 0.1)';
    sourceIndicator.style.borderRadius = 'var(--border-radius)';
    sourceIndicator.style.border = '1px solid rgba(100, 197, 255, 0.3)';
    sourceIndicator.style.marginBottom = '20px';
    
    // Create icon based on whether viewing a specific book or filter
    const icon = selectedBookId ? 
        '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>' : 
        '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"></path><polyline points="8 10 12 14 16 10"></polyline></svg>';
    
    let statusMessage;
    
    if (selectedBookId) {
        // Message for specific book
        statusMessage = `Viewing analytics for book: <strong>${books.get(selectedBookId).name}</strong>`;
    } else {
        // Message for filter
        const filterName = selectedFilterCategory === 'all-books' ? 'All Books' : 
            document.querySelector(`.filter-item[data-filter="${selectedFilterCategory}"]`)?.querySelector('.nav-title')?.textContent || selectedFilterCategory;
        statusMessage = `Viewing analytics for filter: <strong>${filterName}</strong>`;
    }
    
    // Create the text and button elements
    const sourceText = document.createElement('div');
    sourceText.style.flex = '1';
    sourceText.style.color = 'var(--primary-color)';
    sourceText.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px; color: var(--primary-color);">
            ${icon}
            <span>${statusMessage}</span>
        </div>
    `;
    
    // Create change button
    const changeButton = document.createElement('button');
    changeButton.textContent = 'Change';
    changeButton.style.padding = '6px 12px';
    changeButton.style.backgroundColor = 'transparent';
    changeButton.style.border = '1px solid var(--primary-color)';
    changeButton.style.borderRadius = 'var(--border-radius)';
    changeButton.style.color = 'var(--primary-color)';
    changeButton.style.cursor = 'pointer';
    changeButton.style.fontSize = '13px';
    
    changeButton.addEventListener('mouseover', () => {
        changeButton.style.backgroundColor = 'rgba(100, 197, 255, 0.1)';
    });
    
    changeButton.addEventListener('mouseout', () => {
        changeButton.style.backgroundColor = 'transparent';
    });
    
    changeButton.addEventListener('click', () => {
        // Show notification about how to change selection
        showNotification('To change the selection, click on a different filter in the sidebar or select a specific book.', 'info');
    });
    
    // Assemble the source indicator
    sourceIndicator.appendChild(sourceText);
    sourceIndicator.appendChild(changeButton);
    
    // Date range selector
    const dateRangeContainer = document.createElement('div');
    dateRangeContainer.style.display = 'flex';
    dateRangeContainer.style.alignItems = 'center';
    dateRangeContainer.style.gap = '15px';
    dateRangeContainer.style.marginBottom = '30px';
    dateRangeContainer.style.padding = '15px';
    dateRangeContainer.style.backgroundColor = 'var(--card-color)';
    dateRangeContainer.style.borderRadius = 'var(--border-radius)';
    dateRangeContainer.style.border = '1px solid var(--border-color)';

    // Add date range title
    const dateRangeTitle = document.createElement('div');
    dateRangeTitle.textContent = 'Time Period:';
    dateRangeTitle.style.fontWeight = '500';

    // Create date range buttons
    const createDateButton = (text, days, isActive = false) => {
        const btn = document.createElement('button');
        btn.textContent = text;
        btn.style.padding = '8px 15px';
        btn.style.border = '1px solid var(--border-color)';
        btn.style.borderRadius = 'var(--border-radius)';
        btn.style.backgroundColor = isActive ? 'var(--primary-light)' : 'transparent';
        btn.style.color = isActive ? 'white' : 'var(--text-color)';
        btn.style.cursor = 'pointer';
        btn.style.fontWeight = isActive ? '500' : 'normal';
        btn.style.transition = 'all 0.2s ease';

        btn.addEventListener('mouseover', () => {
            if (!isActive) {
                btn.style.backgroundColor = 'var(--hover-bg)';
            }
        });

        btn.addEventListener('mouseout', () => {
            if (!isActive) {
                btn.style.backgroundColor = 'transparent';
            }
        });

        btn.addEventListener('click', () => {
            // Reset all buttons
            dateRangeContainer.querySelectorAll('button').forEach(button => {
                button.style.backgroundColor = 'transparent';
                button.style.color = 'var(--text-color)';
                button.style.fontWeight = 'normal';
            });
            
            // Set this button as active
            btn.style.backgroundColor = 'var(--primary-light)';
            btn.style.color = 'white';
            btn.style.fontWeight = '500';
            
            // For a real implementation, we would update the date range and refresh data
            // For this demo, we'll just show a notification
            showNotification(`Analytics data updated for the last ${days} days`, 'info');
            
            // Simulate changing data by slightly adjusting stats
            const statValues = analyticsContent.querySelectorAll('.stat-value');
            statValues.forEach(stat => {
                const currentValue = parseInt(stat.textContent.replace(/,/g, ''));
                const adjustment = Math.floor(currentValue * (0.7 + (Math.random() * 0.6)));
                stat.textContent = adjustment.toLocaleString();
            });
        });

        return btn;
    };

    // Add date buttons
    dateRangeContainer.appendChild(dateRangeTitle);
    dateRangeContainer.appendChild(createDateButton('7 Days', 7));
    dateRangeContainer.appendChild(createDateButton('30 Days', 30, true)); // Default active
    dateRangeContainer.appendChild(createDateButton('3 Months', 90));
    dateRangeContainer.appendChild(createDateButton('6 Months', 180));
    dateRangeContainer.appendChild(createDateButton('Year', 365));

    // Create a spacer
    const spacer = document.createElement('div');
    spacer.style.flex = '1';
    dateRangeContainer.appendChild(spacer);

    // Add custom date range option
    const customDateLabel = document.createElement('div');
    customDateLabel.textContent = 'Custom:';
    customDateLabel.style.marginRight = '10px';
    
    const startDateInput = document.createElement('input');
    startDateInput.type = 'date';
    startDateInput.style.marginRight = '10px';
    startDateInput.style.padding = '8px';
    startDateInput.style.borderRadius = 'var(--border-radius)';
    startDateInput.style.border = '1px solid var(--border-color)';
    startDateInput.style.backgroundColor = 'var(--card-color)';
    startDateInput.style.color = 'var(--text-color)';
    
    const endDateInput = document.createElement('input');
    endDateInput.type = 'date';
    endDateInput.style.marginRight = '10px';
    endDateInput.style.padding = '8px';
    endDateInput.style.borderRadius = 'var(--border-radius)';
    endDateInput.style.border = '1px solid var(--border-color)';
    endDateInput.style.backgroundColor = 'var(--card-color)';
    endDateInput.style.color = 'var(--text-color)';
    
    const applyButton = document.createElement('button');
    applyButton.textContent = 'Apply';
    applyButton.style.padding = '8px 15px';
    applyButton.style.backgroundColor = 'var(--button-blue)';
    applyButton.style.color = 'white';
    applyButton.style.border = 'none';
    applyButton.style.borderRadius = 'var(--border-radius)';
    applyButton.style.cursor = 'pointer';
    
    applyButton.addEventListener('click', () => {
        if (startDateInput.value && endDateInput.value) {
            // Reset all preset buttons
            dateRangeContainer.querySelectorAll('button').forEach(button => {
                if (button !== applyButton) {
                    button.style.backgroundColor = 'transparent';
                    button.style.color = 'var(--text-color)';
                    button.style.fontWeight = 'normal';
                }
            });
            
            const start = new Date(startDateInput.value);
            const end = new Date(endDateInput.value);
            const timeDiff = Math.abs(end - start);
            const dayDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
            
            showNotification(`Analytics data updated for custom range (${dayDiff} days)`, 'info');
            
            // Simulate changing data
            const statValues = analyticsContent.querySelectorAll('.stat-value');
            statValues.forEach(stat => {
                const currentValue = parseInt(stat.textContent.replace(/,/g, ''));
                const adjustment = Math.floor(currentValue * (0.5 + (Math.random() * 0.8)));
                stat.textContent = adjustment.toLocaleString();
            });
        } else {
            showNotification('Please select both start and end dates', 'error');
        }
    });
    
    dateRangeContainer.appendChild(customDateLabel);
    dateRangeContainer.appendChild(startDateInput);
    dateRangeContainer.appendChild(endDateInput);
    dateRangeContainer.appendChild(applyButton);
    
    // Create overview cards section
    const overviewSection = document.createElement('div');
    overviewSection.style.display = 'flex';
    overviewSection.style.gap = '20px';
    overviewSection.style.marginBottom = '30px';
    overviewSection.style.flexWrap = 'wrap';
    
    // Helper function to create stat cards
    const createStatCard = (title, value, icon, color) => {
        const card = document.createElement('div');
        card.style.flex = '1';
        card.style.minWidth = '200px';
        card.style.backgroundColor = 'var(--card-color)';
        card.style.borderRadius = 'var(--border-radius)';
        card.style.padding = '20px';
        card.style.border = '1px solid var(--border-color)';
        card.style.position = 'relative';
        card.style.overflow = 'hidden';
        
        // Create subtle background icon
        const bgIcon = document.createElement('div');
        bgIcon.style.position = 'absolute';
        bgIcon.style.right = '10px';
        bgIcon.style.top = '10px';
        bgIcon.style.opacity = '0.1';
        bgIcon.style.fontSize = '60px';
        bgIcon.style.transform = 'rotate(15deg)';
        bgIcon.style.color = color;
        bgIcon.innerHTML = icon;
        
        const statValue = document.createElement('div');
        statValue.className = 'stat-value'; // Add class for easy reference
        statValue.style.fontSize = '32px';
        statValue.style.fontWeight = 'bold';
        statValue.style.marginBottom = '10px';
        statValue.style.color = color;
        statValue.textContent = value;
        
        const statTitle = document.createElement('div');
        statTitle.style.fontSize = '14px';
        statTitle.style.color = 'var(--text-secondary)';
        statTitle.textContent = title;
        
        card.appendChild(bgIcon);
        card.appendChild(statValue);
        card.appendChild(statTitle);
        
        return card;
    };
    
    // Calculate analytics data for the selected filter/books
    let totalViews = 0;
    let totalReactions = 0;
    let totalArticles = 0;
    let articleData = [];
    
    // Function to generate realistic view/reaction data for a book
    const generateBookAnalytics = (book) => {
        const bookId = book.id;
        let bookViews = 0;
        let bookReactions = 0;
        let bookArticles = 0;
        
        // Get categories associated with this book
        if (bookCategories.has(bookId)) {
            const categories = bookCategories.get(bookId);
            categories.forEach(item => {
                if (item.type === 'article') {
                    bookArticles++;
                    
                    // Generate pseudo-random but consistent views for each article
                    // Using the article ID to generate a consistent number
                    const articleId = item.id;
                    const seed = parseInt(articleId.replace(/\D/g, '').substring(0, 5) || '12345');
                    const views = (seed % 450) + 50; // Between 50-500 views
                    const likes = Math.floor((seed % 40) + 10); // Between 10-50 likes
                    const dislikes = Math.floor((seed % 15)); // Between 0-15 dislikes
                    
                    bookViews += views;
                    bookReactions += likes + dislikes;
                    
                    // Store data for the top performing content table
                    articleData.push({
                        id: articleId,
                        name: item.name,
                        views: views,
                        reactions: likes,
                        dislikes: dislikes,
                        avgTime: `${Math.floor((seed % 4) + 1)}m ${Math.floor((seed % 50) + 10)}s`
                    });
                }
            });
        }
        
        return { views: bookViews, reactions: bookReactions, articles: bookArticles };
    };
    
    // Process all books in the filter
    booksToShow.forEach(book => {
        const bookStats = generateBookAnalytics(book);
        totalViews += bookStats.views;
        totalReactions += bookStats.reactions;
        totalArticles += bookStats.articles;
    });
    
    // Add stat cards
    overviewSection.appendChild(createStatCard(
        'Total Views', 
        totalViews.toLocaleString(), 
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path><circle cx="12" cy="12" r="3"></circle></svg>', 
        '#64c5ff'
    ));
    
    overviewSection.appendChild(createStatCard(
        'Total Reactions', 
        totalReactions.toLocaleString(), 
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><circle cx="9" cy="9" r="1"></circle><circle cx="15" cy="9" r="1"></circle><circle cx="12" cy="12" r="10"></circle></svg>', 
        '#50c878'
    ));
    
    overviewSection.appendChild(createStatCard(
        'Total Articles', 
        totalArticles.toLocaleString(), 
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>', 
        '#ff9744'
    ));
    
    const totalBooks = booksToShow.length;
    overviewSection.appendChild(createStatCard(
        'Total Books', 
        totalBooks.toLocaleString(), 
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>', 
        '#9146FF'
    ));
    
    // Create chart section
    const chartSection = document.createElement('div');
    chartSection.style.display = 'flex';
    chartSection.style.gap = '20px';
    chartSection.style.marginBottom = '30px';
    chartSection.style.flexWrap = 'wrap';
    
    // Function to create a chart container
    const createChartContainer = (title, chartHTML) => {
        const container = document.createElement('div');
        container.style.flex = '1';
        container.style.minWidth = '400px';
        container.style.backgroundColor = 'var(--card-color)';
        container.style.borderRadius = 'var(--border-radius)';
        container.style.padding = '20px';
        container.style.border = '1px solid var(--border-color)';
        
        const chartTitle = document.createElement('h3');
        chartTitle.textContent = title;
        chartTitle.style.marginBottom = '20px';
        chartTitle.style.fontWeight = '500';
        chartTitle.style.fontSize = '16px';
        
        const chartContent = document.createElement('div');
        chartContent.style.height = title === 'Content Distribution' ? '360px' : '300px';
        chartContent.style.display = 'flex';
        chartContent.style.alignItems = 'center';
        chartContent.style.justifyContent = 'center';
        chartContent.innerHTML = chartHTML;
        
        container.appendChild(chartTitle);
        container.appendChild(chartContent);
        
        return container;
    };
    
    // Generate daily view data for the chart
    const generateDailyViewData = () => {
        const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
        const dayHeights = [];
        const maxHeight = 85; // Maximum height percentage
        
        // Generate heights between 20% and maxHeight%
        for (let i = 0; i < 7; i++) {
            // Use the filter name as part of the seed for consistent but different results per filter
            const seed = (selectedFilterCategory.charCodeAt(0) || 65) + i;
            const height = 20 + (seed % (maxHeight - 20));
            dayHeights.push(height);
        }
        
        // Create HTML for the bar chart
        let barsHTML = '';
        for (let i = 0; i < 7; i++) {
            barsHTML += `<div style="flex: 1; margin: 0 2px; height: ${dayHeights[i]}%; background-color: rgba(100, 197, 255, 0.7); border-radius: 4px 4px 0 0;"></div>`;
        }
        
        // Create HTML for days
        let daysHTML = '';
        days.forEach(day => {
            daysHTML += `<div style="flex: 1;">${day}</div>`;
        });
        
        return {
            bars: barsHTML,
            days: daysHTML
        };
    };
    
    // Get daily view data
    const dailyViewData = generateDailyViewData();
    
    // Create a dynamic bar chart for the views over time
    const viewsChartHTML = `
        <div style="width: 100%; height: 100%; position: relative;">
            <div style="display: flex; flex-direction: column; justify-content: space-between; position: absolute; left: 0; top: 0; bottom: 0; width: 40px; color: var(--text-secondary); font-size: 12px; text-align: right; padding-right: 10px;">
                <div>500</div>
                <div>400</div>
                <div>300</div>
                <div>200</div>
                <div>100</div>
                <div>0</div>
            </div>
            <div style="margin-left: 40px; height: 100%; display: flex; flex-direction: column;">
                <div style="flex: 1; display: flex; align-items: flex-end; padding-bottom: 30px;">
                    <div style="display: flex; width: 100%; height: 100%; align-items: flex-end;">
                        ${dailyViewData.bars}
                    </div>
                </div>
                <div style="height: 30px; display: flex; color: var(--text-secondary); font-size: 12px; text-align: center;">
                    ${dailyViewData.days}
                </div>
            </div>
        </div>
    `;
    
    // Generate content distribution data
    const generateContentDistribution = () => {
        if (totalArticles === 0) {
            return {
                segments: '',
                legend: '<div style="font-size: 14px; color: var(--text-secondary); text-align: center;">No articles available</div>'
            };
        }
        
        // Default distribution
        const distribution = [
            { name: 'Getting Started', color: '#64c5ff', percentage: 43 },
            { name: 'General', color: '#9146FF', percentage: 23 },
            { name: 'FAQ', color: '#ff9744', percentage: 23 },
            { name: 'Other', color: '#50c878', percentage: 11 }
        ];
        
        // Adjust distribution based on filter
        if (selectedFilterCategory !== 'all-books') {
            // Create a more varied distribution for each filter
            const seed = selectedFilterCategory.charCodeAt(0) || 65;
            distribution[0].percentage = 30 + (seed % 30); // 30-60%
            distribution[1].percentage = 20 + (seed % 20); // 20-40%
            distribution[2].percentage = 10 + (seed % 15); // 10-25%
            
            // Ensure total is 100%
            const sumFirst3 = distribution[0].percentage + distribution[1].percentage + distribution[2].percentage;
            distribution[3].percentage = 100 - sumFirst3;
        }
        
        // Calculate stroke dasharray and dashoffset for SVG circle segments
        const radius = 45;
        const circumference = 2 * Math.PI * radius;
        let offset = 0;
        
        let segmentsHTML = '';
        let legendHTML = `<div style="font-weight: 600; margin-bottom: 10px; color: var(--text-color); font-size: 15px;">Content Types</div>`;
        
        distribution.forEach(item => {
            const strokeDasharray = (item.percentage / 100) * circumference;
            segmentsHTML += `<circle cx="50" cy="50" r="${radius}" fill="transparent" stroke="${item.color}" stroke-width="10" stroke-dasharray="${strokeDasharray}" stroke-dashoffset="${offset}" />`;
            offset += strokeDasharray;
            
            legendHTML += `
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <div style="width: 14px; height: 14px; background-color: ${item.color}; border-radius: 2px; margin-right: 10px;"></div>
                    <div style="font-size: 13px; color: var(--text-color); font-weight: 500;">${item.name}</div>
                    <div style="font-size: 13px; color: var(--text-secondary); margin-left: auto;">${item.percentage}%</div>
                </div>
            `;
        });
        
        return {
            segments: segmentsHTML,
            legend: legendHTML
        };
    };
    
    // Get content distribution data
    const contentDist = generateContentDistribution();
    
    // Create a dynamic pie chart for the popular content
    const popularContentHTML = `
        <div style="width: 100%; height: 100%; display: flex; flex-direction: row; align-items: center;">
            <div style="flex: 3; display: flex; justify-content: center; align-items: center;">
                <svg width="280" height="280" viewBox="0 0 100 100">
                    <circle cx="50" cy="50" r="45" fill="transparent" stroke="#ddd" stroke-width="10" />
                    ${contentDist.segments}
                </svg>
            </div>
            <div style="flex: 2; padding-left: 20px; display: flex; flex-direction: column; gap: 12px; max-width: 220px; margin-right: 10px;">
                ${contentDist.legend}
            </div>
        </div>
    `;
    
    chartSection.appendChild(createChartContainer('Views over Time', viewsChartHTML));
    chartSection.appendChild(createChartContainer('Content Distribution', popularContentHTML));
    
    // Create top content table
    const topContentSection = document.createElement('div');
    topContentSection.style.backgroundColor = 'var(--card-color)';
    topContentSection.style.borderRadius = 'var(--border-radius)';
    topContentSection.style.padding = '20px';
    topContentSection.style.border = '1px solid var(--border-color)';
    topContentSection.style.marginBottom = '30px';
    
    const topContentTitle = document.createElement('h3');
    topContentTitle.textContent = 'Top Performing Content';
    topContentTitle.style.marginBottom = '20px';
    topContentTitle.style.fontWeight = '500';
    topContentTitle.style.fontSize = '16px';
    
    const topContentTable = document.createElement('table');
    topContentTable.style.width = '100%';
    topContentTable.style.borderCollapse = 'collapse';
    
    // Create table header
    const tableHeader = document.createElement('thead');
    tableHeader.innerHTML = `
        <tr>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">Title</th>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">Views</th>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">Likes</th>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">Avg. Time</th>
        </tr>
    `;
    
    // Create table body with actual data
    const tableBody = document.createElement('tbody');
    
    // Sort articles by views (descending)
    articleData.sort((a, b) => b.views - a.views);
    
    // Show top 5 articles (or fewer if not enough)
    const topArticles = articleData.slice(0, 5);
    
    topArticles.forEach(article => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color); color: var(--text-color);">${article.name}</td>
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color); color: var(--text-color);">${article.views}</td>
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color); color: var(--text-color);">${article.reactions}</td>
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color); color: var(--text-color);">${article.avgTime}</td>
        `;
        
        tableBody.appendChild(row);
    });
    
    // If there are no articles, show a message
    if (topArticles.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
            <td colspan="4" style="padding: 20px; text-align: center; color: var(--text-secondary);">No articles available</td>
        `;
        tableBody.appendChild(emptyRow);
    }
    
    topContentTable.appendChild(tableHeader);
    topContentTable.appendChild(tableBody);
    
    topContentSection.appendChild(topContentTitle);
    topContentSection.appendChild(topContentTable);
    
    // User engagement section
    const userEngagementSection = document.createElement('div');
    userEngagementSection.style.backgroundColor = 'var(--card-color)';
    userEngagementSection.style.borderRadius = 'var(--border-radius)';
    userEngagementSection.style.padding = '20px';
    userEngagementSection.style.border = '1px solid var(--border-color)';
    userEngagementSection.style.marginBottom = '30px';
    
    const userEngagementTitle = document.createElement('h3');
    userEngagementTitle.textContent = 'User Engagement';
    userEngagementTitle.style.marginBottom = '20px';
    userEngagementTitle.style.fontWeight = '500';
    userEngagementTitle.style.fontSize = '16px';
    
    // Generate some fake user data for demonstration
    const generateUserEngagementData = () => {
        const users = [
            { name: 'John Doe', role: 'Team Member', views: 145, activity: 'high' },
            { name: 'Jane Smith', role: 'Team Member', views: 127, activity: 'high' },
            { name: 'Alex Johnson', role: 'Admin', views: 89, activity: 'medium' },
            { name: 'Sarah Williams', role: 'Public User', views: 76, activity: 'medium' },
            { name: 'Mark Taylor', role: 'Public User', views: 54, activity: 'low' }
        ];
        
        // Adjust based on filter for variety
        if (selectedFilterCategory !== 'all-books') {
            const seed = selectedFilterCategory.charCodeAt(0) || 65;
            users.forEach((user, index) => {
                user.views = Math.floor(user.views * (0.8 + ((seed + index) % 5) / 10));
            });
            
            // Re-sort based on new view counts
            users.sort((a, b) => b.views - a.views);
        }
        
        return users;
    };
    
    const users = generateUserEngagementData();
    
    const userTable = document.createElement('table');
    userTable.style.width = '100%';
    userTable.style.borderCollapse = 'collapse';
    
    // Create user table header
    const userTableHeader = document.createElement('thead');
    userTableHeader.innerHTML = `
        <tr>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">User</th>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">Role</th>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">Views</th>
            <th style="text-align: left; padding: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); font-weight: 500; font-size: 14px;">Activity</th>
        </tr>
    `;
    
    // Create user table body
    const userTableBody = document.createElement('tbody');
    
    users.forEach(user => {
        // Define colors for activity levels
        const activityColors = {
            high: '#50c878',
            medium: '#ff9744',
            low: '#9146FF'
        };
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color); color: var(--text-color);">${user.name}</td>
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color); color: var(--text-color);">${user.role}</td>
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color); color: var(--text-color);">${user.views}</td>
            <td style="padding: 15px 10px; border-bottom: 1px solid var(--border-color);">
                <span style="display: inline-block; padding: 2px 10px; border-radius: 12px; font-size: 12px; font-weight: 500; background-color: rgba(${activityColors[user.activity].replace('#', '').match(/../g).map(c => parseInt(c, 16)).join(', ')}, 0.2); color: ${activityColors[user.activity]};">
                    ${user.activity.charAt(0).toUpperCase() + user.activity.slice(1)}
                </span>
            </td>
        `;
        
        userTableBody.appendChild(row);
    });
    
    userTable.appendChild(userTableHeader);
    userTable.appendChild(userTableBody);
    
    userEngagementSection.appendChild(userEngagementTitle);
    userEngagementSection.appendChild(userTable);
    
    // Assemble all sections
    analyticsContent.appendChild(header);
    analyticsContent.appendChild(sourceIndicator);
    analyticsContent.appendChild(dateRangeContainer);
    analyticsContent.appendChild(overviewSection);
    analyticsContent.appendChild(chartSection);
    analyticsContent.appendChild(topContentSection);
    analyticsContent.appendChild(userEngagementSection);
    
    // Add content to main container
    contentContainer.appendChild(analyticsContent);
}

// Function to show the Settings page
function showSettingsPage() {
    if (!contentContainer || !contentTitle) {
        console.error("Content container or title element not found");
        return;
    }
    
    console.log("Showing Settings Page");
    
    // Set page title
    contentTitle.textContent = "Settings";
    
    // Clear main content
    contentContainer.innerHTML = '';
    
    // Create settings content
    const settingsContent = document.createElement('div');
    settingsContent.className = 'settings-content';
    settingsContent.style.padding = '20px';
    
    // Add header with info text
    const header = document.createElement('div');
    header.style.marginBottom = '30px';
    header.innerHTML = `
        <h2 style="margin-bottom: 10px; font-size: 24px; font-weight: 500;">Knowledge Base Settings</h2>
        <p style="color: var(--text-secondary); margin-bottom: 20px;">Configure your knowledge base preferences, account settings, and manage integrations.</p>
    `;
    
    // Create settings sections
    const createSettingsSection = (title, content) => {
        const section = document.createElement('div');
        section.style.backgroundColor = 'var(--card-color)';
        section.style.borderRadius = 'var(--border-radius)';
        section.style.padding = '20px';
        section.style.border = '1px solid var(--border-color)';
        section.style.marginBottom = '20px';
        
        const sectionTitle = document.createElement('h3');
        sectionTitle.textContent = title;
        sectionTitle.style.marginBottom = '20px';
        sectionTitle.style.fontWeight = '500';
        sectionTitle.style.fontSize = '16px';
        
        section.appendChild(sectionTitle);
        section.appendChild(content);
        
        return section;
    };
    
    // General Settings Section
    const generalSettings = document.createElement('div');
    
    // Theme Setting
    const themeSetting = document.createElement('div');
    themeSetting.style.marginBottom = '20px';
    
    const themeLabel = document.createElement('div');
    themeLabel.textContent = 'Theme';
    themeLabel.style.marginBottom = '8px';
    themeLabel.style.fontWeight = '500';
    
    const themeSelect = document.createElement('select');
    themeSelect.style.width = '100%';
    themeSelect.style.maxWidth = '300px';
    themeSelect.style.padding = '10px';
    themeSelect.style.backgroundColor = 'var(--background-color)';
    themeSelect.style.color = 'var(--text-color)';
    themeSelect.style.border = '1px solid var(--border-color)';
    themeSelect.style.borderRadius = 'var(--border-radius)';
    
    const darkOption = document.createElement('option');
    darkOption.value = 'dark';
    darkOption.textContent = 'Dark';
    darkOption.selected = true;
    
    const lightOption = document.createElement('option');
    lightOption.value = 'light';
    lightOption.textContent = 'Light';
    
    themeSelect.appendChild(darkOption);
    themeSelect.appendChild(lightOption);
    
    themeSetting.appendChild(themeLabel);
    themeSetting.appendChild(themeSelect);
    
    // Language Setting
    const languageSetting = document.createElement('div');
    languageSetting.style.marginBottom = '20px';
    
    const languageLabel = document.createElement('div');
    languageLabel.textContent = 'Language';
    languageLabel.style.marginBottom = '8px';
    languageLabel.style.fontWeight = '500';
    
    const languageSelect = document.createElement('select');
    languageSelect.style.width = '100%';
    languageSelect.style.maxWidth = '300px';
    languageSelect.style.padding = '10px';
    languageSelect.style.backgroundColor = 'var(--background-color)';
    languageSelect.style.color = 'var(--text-color)';
    languageSelect.style.border = '1px solid var(--border-color)';
    languageSelect.style.borderRadius = 'var(--border-radius)';
    
    const englishOption = document.createElement('option');
    englishOption.value = 'en';
    englishOption.textContent = 'English';
    englishOption.selected = true;
    
    const spanishOption = document.createElement('option');
    spanishOption.value = 'es';
    spanishOption.textContent = 'Spanish';
    
    const frenchOption = document.createElement('option');
    frenchOption.value = 'fr';
    frenchOption.textContent = 'French';
    
    const germanOption = document.createElement('option');
    germanOption.value = 'de';
    germanOption.textContent = 'German';
    
    languageSelect.appendChild(englishOption);
    languageSelect.appendChild(spanishOption);
    languageSelect.appendChild(frenchOption);
    languageSelect.appendChild(germanOption);
    
    languageSetting.appendChild(languageLabel);
    languageSetting.appendChild(languageSelect);
    
    // Auto-save Setting
    const autoSaveSetting = document.createElement('div');
    
    const autoSaveCheck = document.createElement('input');
    autoSaveCheck.type = 'checkbox';
    autoSaveCheck.id = 'autoSave';
    autoSaveCheck.checked = true;
    autoSaveCheck.style.marginRight = '10px';
    
    const autoSaveLabel = document.createElement('label');
    autoSaveLabel.htmlFor = 'autoSave';
    autoSaveLabel.textContent = 'Enable auto-save for articles (every 30 seconds)';
    
    autoSaveSetting.appendChild(autoSaveCheck);
    autoSaveSetting.appendChild(autoSaveLabel);
    
    generalSettings.appendChild(themeSetting);
    generalSettings.appendChild(languageSetting);
    generalSettings.appendChild(autoSaveSetting);
    
    // Profile Settings Section
    const profileSettings = document.createElement('div');
    
    // Name Setting
    const nameSetting = document.createElement('div');
    nameSetting.style.marginBottom = '20px';
    
    const nameLabel = document.createElement('div');
    nameLabel.textContent = 'Full Name';
    nameLabel.style.marginBottom = '8px';
    nameLabel.style.fontWeight = '500';
    
    const nameInput = document.createElement('input');
    nameInput.type = 'text';
    nameInput.value = 'Demo User';
    nameInput.style.width = '100%';
    nameInput.style.maxWidth = '300px';
    nameInput.style.padding = '10px';
    nameInput.style.backgroundColor = 'var(--background-color)';
    nameInput.style.color = 'var(--text-color)';
    nameInput.style.border = '1px solid var(--border-color)';
    nameInput.style.borderRadius = 'var(--border-radius)';
    
    nameSetting.appendChild(nameLabel);
    nameSetting.appendChild(nameInput);
    
    // Email Setting
    const emailSetting = document.createElement('div');
    emailSetting.style.marginBottom = '20px';
    
    const emailLabel = document.createElement('div');
    emailLabel.textContent = 'Email';
    emailLabel.style.marginBottom = '8px';
    emailLabel.style.fontWeight = '500';
    
    const emailInput = document.createElement('input');
    emailInput.type = 'email';
    emailInput.value = 'demo@example.com';
    emailInput.style.width = '100%';
    emailInput.style.maxWidth = '300px';
    emailInput.style.padding = '10px';
    emailInput.style.backgroundColor = 'var(--background-color)';
    emailInput.style.color = 'var(--text-color)';
    emailInput.style.border = '1px solid var(--border-color)';
    emailInput.style.borderRadius = 'var(--border-radius)';
    
    emailSetting.appendChild(emailLabel);
    emailSetting.appendChild(emailInput);
    
    // Password Setting
    const passwordSetting = document.createElement('div');
    
    const passwordButton = document.createElement('button');
    passwordButton.textContent = 'Change Password';
    passwordButton.style.padding = '10px 20px';
    passwordButton.style.backgroundColor = 'var(--button-blue)';
    passwordButton.style.color = 'white';
    passwordButton.style.border = 'none';
    passwordButton.style.borderRadius = 'var(--border-radius)';
    passwordButton.style.cursor = 'pointer';
    
    passwordSetting.appendChild(passwordButton);
    
    profileSettings.appendChild(nameSetting);
    profileSettings.appendChild(emailSetting);
    profileSettings.appendChild(passwordSetting);
    
    // Integration Settings Section
    const integrationSettings = document.createElement('div');
    
    const createIntegrationItem = (title, description, connected) => {
        const item = document.createElement('div');
        item.style.display = 'flex';
        item.style.justifyContent = 'space-between';
        item.style.alignItems = 'center';
        item.style.padding = '15px 0';
        item.style.borderBottom = '1px solid var(--border-color)';
        
        const itemInfo = document.createElement('div');
        
        const itemTitle = document.createElement('div');
        itemTitle.textContent = title;
        itemTitle.style.fontWeight = '500';
        itemTitle.style.marginBottom = '5px';
        
        const itemDesc = document.createElement('div');
        itemDesc.textContent = description;
        itemDesc.style.fontSize = '13px';
        itemDesc.style.color = 'var(--text-secondary)';
        
        itemInfo.appendChild(itemTitle);
        itemInfo.appendChild(itemDesc);
        
        const connectButton = document.createElement('button');
        connectButton.textContent = connected ? 'Disconnect' : 'Connect';
        connectButton.style.padding = '8px 16px';
        connectButton.style.backgroundColor = connected ? 'transparent' : 'var(--button-blue)';
        connectButton.style.color = connected ? 'var(--text-color)' : 'white';
        connectButton.style.border = connected ? '1px solid var(--border-color)' : 'none';
        connectButton.style.borderRadius = 'var(--border-radius)';
        connectButton.style.cursor = 'pointer';
        
        item.appendChild(itemInfo);
        item.appendChild(connectButton);
        
        return item;
    };
    
    integrationSettings.appendChild(createIntegrationItem(
        'Google Analytics',
        'Track website traffic and user engagement',
        true
    ));
    
    integrationSettings.appendChild(createIntegrationItem(
        'Slack',
        'Receive notifications and updates in your Slack workspace',
        false
    ));
    
    integrationSettings.appendChild(createIntegrationItem(
        'GitHub',
        'Sync documentation with your GitHub repositories',
        false
    ));
    
    integrationSettings.appendChild(createIntegrationItem(
        'Zendesk',
        'Connect with your customer support platform',
        false
    ));
    
    // Data Management Section
    const dataManagement = document.createElement('div');
    
    // Export and Import Buttons
    const exportButton = document.createElement('button');
    exportButton.textContent = 'Export All Data';
    exportButton.style.padding = '10px 20px';
    exportButton.style.backgroundColor = 'transparent';
    exportButton.style.color = 'var(--text-color)';
    exportButton.style.border = '1px solid var(--border-color)';
    exportButton.style.borderRadius = 'var(--border-radius)';
    exportButton.style.cursor = 'pointer';
    exportButton.style.marginRight = '10px';
    exportButton.style.marginBottom = '15px';
    
    const importButton = document.createElement('button');
    importButton.textContent = 'Import Data';
    importButton.style.padding = '10px 20px';
    importButton.style.backgroundColor = 'transparent';
    importButton.style.color = 'var(--text-color)';
    importButton.style.border = '1px solid var(--border-color)';
    importButton.style.borderRadius = 'var(--border-radius)';
    importButton.style.cursor = 'pointer';
    importButton.style.marginRight = '10px';
    importButton.style.marginBottom = '15px';
    
    // Add header for default content management
    const defaultContentHeader = document.createElement('div');
    defaultContentHeader.innerHTML = '<h4 style="margin: 20px 0 15px; font-size: 15px; color: var(--text-secondary);">Default Content Management</h4>';
    defaultContentHeader.style.borderTop = '1px solid var(--border-color)';
    defaultContentHeader.style.paddingTop = '20px';
    defaultContentHeader.style.marginTop = '10px';
    
    // Default Content Management Buttons
    const clearDefaultButton = document.createElement('button');
    clearDefaultButton.textContent = 'Clear Default Content';
    clearDefaultButton.style.padding = '10px 20px';
    clearDefaultButton.style.backgroundColor = 'transparent';
    clearDefaultButton.style.color = '#ff9744'; // Orange color
    clearDefaultButton.style.border = '1px solid rgba(255, 151, 68, 0.3)';
    clearDefaultButton.style.borderRadius = 'var(--border-radius)';
    clearDefaultButton.style.cursor = 'pointer';
    clearDefaultButton.style.marginRight = '10px';
    clearDefaultButton.style.marginBottom = '15px';
    
    // Add click event to clear default button
    clearDefaultButton.addEventListener('click', function() {
        if (confirm('This will remove all default demo books, categories, articles, and files while preserving your own content. Continue?')) {
            clearDefaultContent();
        }
    });
    
    const restoreDefaultButton = document.createElement('button');
    restoreDefaultButton.textContent = 'Restore Default Content';
    restoreDefaultButton.style.padding = '10px 20px';
    restoreDefaultButton.style.backgroundColor = 'transparent';
    restoreDefaultButton.style.color = 'var(--primary-color)';
    restoreDefaultButton.style.border = '1px solid rgba(100, 197, 255, 0.3)';
    restoreDefaultButton.style.borderRadius = 'var(--border-radius)';
    restoreDefaultButton.style.cursor = 'pointer';
    restoreDefaultButton.style.marginRight = '10px';
    restoreDefaultButton.style.marginBottom = '15px';
    
    // Add click event to restore default button
    restoreDefaultButton.addEventListener('click', function() {
        if (confirm('This will restore all default demo books, categories, articles, and files without affecting your own content. Continue?')) {
            restoreDefaultContent();
        }
    });
    
    // "Reset All Data" section header
    const resetAllHeader = document.createElement('div');
    resetAllHeader.innerHTML = '<h4 style="margin: 20px 0 15px; font-size: 15px; color: var(--text-secondary);">Reset All Data</h4>';
    resetAllHeader.style.borderTop = '1px solid var(--border-color)';
    resetAllHeader.style.paddingTop = '20px';
    resetAllHeader.style.marginTop = '10px';
    
    // Reset All Button
    const resetButton = document.createElement('button');
    resetButton.textContent = 'Reset to Default';
    resetButton.style.padding = '10px 20px';
    resetButton.style.backgroundColor = 'rgba(255, 68, 68, 0.1)';
    resetButton.style.color = '#ff4444';
    resetButton.style.border = '1px solid rgba(255, 68, 68, 0.3)';
    resetButton.style.borderRadius = 'var(--border-radius)';
    resetButton.style.cursor = 'pointer';
    
    // Add info text about what reset does
    const resetInfoText = document.createElement('p');
    resetInfoText.textContent = 'Warning: This will delete ALL content, including your own, and reset to factory defaults.';
    resetInfoText.style.fontSize = '13px';
    resetInfoText.style.color = '#ff4444';
    resetInfoText.style.marginTop = '10px';
    
    // Add click event to reset button
    resetButton.addEventListener('click', function() {
        if (confirm('WARNING: This will delete ALL data, including your own content. This cannot be undone. Continue?')) {
            resetData();
            showNotification('All data has been reset to default', 'success');
        }
    });
    
    // Assemble data management section
    dataManagement.appendChild(exportButton);
    dataManagement.appendChild(importButton);
    dataManagement.appendChild(defaultContentHeader);
    dataManagement.appendChild(clearDefaultButton);
    dataManagement.appendChild(restoreDefaultButton);
    dataManagement.appendChild(resetAllHeader);
    dataManagement.appendChild(resetButton);
    dataManagement.appendChild(resetInfoText);
    
    // Save Button
    const saveButtonContainer = document.createElement('div');
    saveButtonContainer.style.marginTop = '30px';
    saveButtonContainer.style.textAlign = 'right';
    
    const saveButton = document.createElement('button');
    saveButton.textContent = 'Save Changes';
    saveButton.style.padding = '10px 20px';
    saveButton.style.backgroundColor = 'var(--button-blue)';
    saveButton.style.color = 'white';
    saveButton.style.border = 'none';
    saveButton.style.borderRadius = 'var(--border-radius)';
    saveButton.style.cursor = 'pointer';
    
    // Add click event to save button
    saveButton.addEventListener('click', function() {
        showNotification('Settings saved successfully', 'success');
    });
    
    saveButtonContainer.appendChild(saveButton);
    
    // Assemble all sections
    settingsContent.appendChild(header);
    settingsContent.appendChild(createSettingsSection('General Settings', generalSettings));
    settingsContent.appendChild(createSettingsSection('Profile', profileSettings));
    settingsContent.appendChild(createSettingsSection('Integrations', integrationSettings));
    settingsContent.appendChild(createSettingsSection('Data Management', dataManagement));
    settingsContent.appendChild(saveButtonContainer);
    
    // Add content to main container
    contentContainer.appendChild(settingsContent);
}

// Function to clear only the default demo content
function clearDefaultContent() {
    console.log("🧹 Clearing default demo content...");
    
    // First, identify all demo content by ID prefix
    // Demo content IDs start with 'book-demo-', 'category-demo-', 'article-demo-', etc.
    const demoBookIds = [];
    
    // Find all demo books
    for (const [bookId, book] of books.entries()) {
        if (bookId.startsWith('book-demo-')) {
            demoBookIds.push(bookId);
        }
    }
    
    // Remove demo books and their content
    demoBookIds.forEach(bookId => {
        // Get the categories for this book
        const categories = bookCategories.get(bookId);
        if (categories) {
            bookCategories.delete(bookId);
        }
        
        // Remove from book filters
        if (bookFilters) {
            for (const [filterName, filterBooks] of bookFilters.entries()) {
                const updatedBooks = filterBooks.filter(book => book.id !== bookId);
                bookFilters.set(filterName, updatedBooks);
            }
        }
        
        // Remove the book
        books.delete(bookId);
    });
    
    // If the selected book was a demo book, reset it
    if (selectedBookId && selectedBookId.startsWith('book-demo-')) {
        // Reset selected book - if there's another book available, select it
        const remainingBooks = Array.from(books.values());
        if (remainingBooks.length > 0) {
            selectedBookId = remainingBooks[0].id;
        } else {
            selectedBookId = null;
        }
    }
    
    // Save the updated data
    saveData();
    localStorage.setItem('demoContentCleared', 'true');
    
    // Update UI
    updateBooksSidebar();
    updateFilterCounts();
    showMyBooksPage();
    
    console.log("✅ Demo content cleared!");
    showNotification("Default demo content has been cleared", "success");
}

// Function to restore default demo content
function restoreDefaultContent() {
    console.log("🔄 Restoring default demo content...");
    
    // First, clear any existing demo content to avoid duplicates
    clearDefaultContent();
    
    // Create fresh demo data
    createDemoData();
    
    // Mark demo content as created
    localStorage.setItem('demoContentCreated', 'true');
    localStorage.removeItem('demoContentCleared');
    
    // Update UI
    updateBooksSidebar();
    updateFilterCounts();
    showMyBooksPage();
    
    console.log("✅ Demo content restored!");
    showNotification("Default demo content has been restored", "success");
} 

// Function to toggle profile menu dropdown
function toggleProfileMenu() {
    // Check if profile menu already exists and remove it
    const existingMenu = document.getElementById('profile-dropdown-menu');
    if (existingMenu) {
        existingMenu.remove();
        return;
    }
    
    // Create profile menu
    const profileMenu = document.createElement('div');
    profileMenu.id = 'profile-dropdown-menu';
    profileMenu.style.position = 'absolute';
    profileMenu.style.top = '56px'; // Just below the header
    profileMenu.style.right = '10px';
    profileMenu.style.width = '320px';
    profileMenu.style.backgroundColor = 'var(--card-color)';
    profileMenu.style.borderRadius = 'var(--border-radius)';
    profileMenu.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.2)';
    profileMenu.style.zIndex = '1000';
    profileMenu.style.overflow = 'hidden';
    profileMenu.style.border = '1px solid var(--border-color)';
    
    // User profile section
    const profileSection = document.createElement('div');
    profileSection.style.padding = '20px';
    profileSection.style.display = 'flex';
    profileSection.style.alignItems = 'center';
    profileSection.style.borderBottom = '1px solid var(--border-color)';
    
    // Avatar
    const avatar = document.createElement('div');
    avatar.style.width = '50px';
    avatar.style.height = '50px';
    avatar.style.borderRadius = '50%';
    avatar.style.backgroundColor = 'var(--primary-color)';
    avatar.style.color = 'white';
    avatar.style.display = 'flex';
    avatar.style.alignItems = 'center';
    avatar.style.justifyContent = 'center';
    avatar.style.fontSize = '24px';
    avatar.style.fontWeight = 'bold';
    avatar.style.marginRight = '15px';
    avatar.textContent = 'D'; // First letter of Demo User
    
    // User info
    const userInfo = document.createElement('div');
    userInfo.style.flex = '1';
    
    const userName = document.createElement('div');
    userName.style.fontWeight = '500';
    userName.style.marginBottom = '5px';
    userName.textContent = 'Demo User';
    
    const userEmail = document.createElement('div');
    userEmail.style.fontSize = '13px';
    userEmail.style.color = 'var(--text-secondary)';
    userEmail.textContent = 'demo@example.com';
    
    userInfo.appendChild(userName);
    userInfo.appendChild(userEmail);
    
    profileSection.appendChild(avatar);
    profileSection.appendChild(userInfo);
    
    // Menu items
    const menuItems = document.createElement('div');
    menuItems.style.padding = '8px 0';
    
    // Create menu item function
    const createMenuItem = (icon, text, onClick, comingSoon = false) => {
        const item = document.createElement('div');
        item.style.padding = '10px 20px';
        item.style.display = 'flex';
        item.style.alignItems = 'center';
        item.style.cursor = 'pointer';
        item.style.color = 'var(--text-color)';
        item.style.transition = 'background-color 0.2s';
        
        // Icon
        const iconElement = document.createElement('div');
        iconElement.style.marginRight = '15px';
        iconElement.style.width = '20px';
        iconElement.style.display = 'flex';
        iconElement.style.alignItems = 'center';
        iconElement.style.justifyContent = 'center';
        iconElement.innerHTML = icon;
        
        // Text
        const textElement = document.createElement('div');
        textElement.style.flex = '1';
        textElement.textContent = text;
        
        // Coming soon badge if applicable
        if (comingSoon) {
            const badge = document.createElement('span');
            badge.textContent = 'Coming soon';
            badge.style.fontSize = '11px';
            badge.style.padding = '2px 6px';
            badge.style.borderRadius = '10px';
            badge.style.backgroundColor = 'rgba(255, 151, 68, 0.2)';
            badge.style.color = 'var(--accent-color)';
            badge.style.fontWeight = '500';
            item.appendChild(badge);
        }
        
        item.appendChild(iconElement);
        item.appendChild(textElement);
        
        // Hover effect
        item.addEventListener('mouseenter', () => {
            item.style.backgroundColor = 'var(--hover-bg)';
        });
        
        item.addEventListener('mouseleave', () => {
            item.style.backgroundColor = 'transparent';
        });
        
        // Click handler
        if (onClick) {
            item.addEventListener('click', onClick);
        }
        
        return item;
    };
    
    // Account settings
    const settingsIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="3"></circle>
        <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
    </svg>`;
    
    const settingsItem = createMenuItem(
        settingsIcon,
        'Account settings',
        () => {
            profileMenu.remove();
            showSettingsPage();
        }
    );
    
    // Team management
    const teamIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
        <circle cx="9" cy="7" r="4"></circle>
        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
    </svg>`;
    
    const teamItem = createMenuItem(
        teamIcon,
        'Team management',
        null,
        true
    );
    
    // Content sharing
    const shareIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="18" cy="5" r="3"></circle>
        <circle cx="6" cy="12" r="3"></circle>
        <circle cx="18" cy="19" r="3"></circle>
        <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
        <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
    </svg>`;
    
    const shareItem = createMenuItem(
        shareIcon,
        'Content sharing',
        null,
        true
    );
    
    // Access requests
    const requestIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
    </svg>`;
    
    const requestItem = createMenuItem(
        requestIcon,
        'Access requests',
        null,
        true
    );
    
    menuItems.appendChild(settingsItem);
    menuItems.appendChild(teamItem);
    menuItems.appendChild(shareItem);
    menuItems.appendChild(requestItem);
    
    // Membership section
    const membershipSection = document.createElement('div');
    membershipSection.style.padding = '15px 20px';
    membershipSection.style.borderTop = '1px solid var(--border-color)';
    
    const membershipHeader = document.createElement('div');
    membershipHeader.style.display = 'flex';
    membershipHeader.style.justifyContent = 'space-between';
    membershipHeader.style.alignItems = 'center';
    membershipHeader.style.marginBottom = '10px';
    
    const membershipTitle = document.createElement('div');
    membershipTitle.style.fontWeight = '500';
    membershipTitle.style.fontSize = '14px';
    membershipTitle.textContent = 'Free Plan';
    
    const upgradeButton = document.createElement('button');
    upgradeButton.textContent = 'Upgrade to Pro';
    upgradeButton.style.padding = '6px 12px';
    upgradeButton.style.backgroundColor = 'var(--button-blue)';
    upgradeButton.style.color = 'white';
    upgradeButton.style.border = 'none';
    upgradeButton.style.borderRadius = 'var(--border-radius)';
    upgradeButton.style.cursor = 'pointer';
    upgradeButton.style.fontSize = '12px';
    upgradeButton.style.fontWeight = '500';
    
    // Add click handler to show membership modal
    upgradeButton.addEventListener('click', () => {
        profileMenu.remove();
        showMembershipModal();
    });
    
    membershipHeader.appendChild(membershipTitle);
    membershipHeader.appendChild(upgradeButton);
    
    const membershipInfo = document.createElement('div');
    membershipInfo.style.fontSize = '13px';
    membershipInfo.style.color = 'var(--text-secondary)';
    membershipInfo.textContent = 'Current usage: 2 of 2 books (Free limit)';
    
    membershipSection.appendChild(membershipHeader);
    membershipSection.appendChild(membershipInfo);
    
    // Sign out section
    const signOutSection = document.createElement('div');
    signOutSection.style.padding = '10px 20px';
    signOutSection.style.borderTop = '1px solid var(--border-color)';
    
    const signOutButton = document.createElement('button');
    signOutButton.textContent = 'Sign out';
    signOutButton.style.padding = '8px 12px';
    signOutButton.style.backgroundColor = 'transparent';
    signOutButton.style.color = 'var(--text-color)';
    signOutButton.style.border = '1px solid var(--border-color)';
    signOutButton.style.borderRadius = 'var(--border-radius)';
    signOutButton.style.cursor = 'pointer';
    signOutButton.style.width = '100%';
    signOutButton.style.textAlign = 'center';
    signOutButton.style.fontSize = '14px';
    
    // Add click handler for sign out
    signOutButton.addEventListener('click', () => {
        showNotification('Sign out functionality coming soon', 'info');
        profileMenu.remove();
    });
    
    signOutSection.appendChild(signOutButton);
    
    // Assemble menu
    profileMenu.appendChild(profileSection);
    profileMenu.appendChild(menuItems);
    profileMenu.appendChild(membershipSection);
    profileMenu.appendChild(signOutSection);
    
    // Add to document
    document.body.appendChild(profileMenu);
    
    // Close menu when clicking outside
    function closeMenu(e) {
        if (!profileMenu.contains(e.target) && e.target !== document.querySelector('.profile-icon')) {
            profileMenu.remove();
            document.removeEventListener('click', closeMenu);
        }
    }
    
    // Add a small delay before adding the event listener
    setTimeout(() => {
        document.addEventListener('click', closeMenu);
    }, 10);
}

// Function to show membership modal
function showMembershipModal() {
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    modalOverlay.style.position = 'fixed';
    modalOverlay.style.top = '0';
    modalOverlay.style.left = '0';
    modalOverlay.style.width = '100%';
    modalOverlay.style.height = '100%';
    modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
    modalOverlay.style.zIndex = '2000';
    modalOverlay.style.display = 'flex';
    modalOverlay.style.alignItems = 'center';
    modalOverlay.style.justifyContent = 'center';
    
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.className = 'membership-modal';
    modalContainer.style.backgroundColor = 'var(--card-color)';
    modalContainer.style.borderRadius = '12px';
    modalContainer.style.width = '800px';
    modalContainer.style.maxWidth = '90%';
    modalContainer.style.maxHeight = '90vh';
    modalContainer.style.overflowY = 'auto';
    modalContainer.style.boxShadow = '0 4px 24px rgba(0, 0, 0, 0.3)';
    
    // Create modal header
    const modalHeader = document.createElement('div');
    modalHeader.style.padding = '20px 30px';
    modalHeader.style.borderBottom = '1px solid var(--border-color)';
    modalHeader.style.display = 'flex';
    modalHeader.style.justifyContent = 'space-between';
    modalHeader.style.alignItems = 'center';
    
    const headerTitle = document.createElement('h2');
    headerTitle.textContent = 'Choose Your Plan';
    headerTitle.style.margin = '0';
    headerTitle.style.fontSize = '24px';
    headerTitle.style.fontWeight = '500';
    
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '✕';
    closeButton.style.backgroundColor = 'transparent';
    closeButton.style.border = 'none';
    closeButton.style.fontSize = '20px';
    closeButton.style.color = 'var(--text-secondary)';
    closeButton.style.cursor = 'pointer';
    
    // Add click handler to close button
    closeButton.addEventListener('click', () => {
        document.body.removeChild(modalOverlay);
    });
    
    modalHeader.appendChild(headerTitle);
    modalHeader.appendChild(closeButton);
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.style.padding = '30px';
    
    // Create plans container
    const plansContainer = document.createElement('div');
    plansContainer.style.display = 'flex';
    plansContainer.style.gap = '20px';
    plansContainer.style.marginTop = '20px';
    
    // Function to create a plan card
    const createPlanCard = (title, price, features, recommended = false, buttonText = 'Select Plan') => {
        const card = document.createElement('div');
        card.style.flex = '1';
        card.style.backgroundColor = 'var(--background-color)';
        card.style.borderRadius = '10px';
        card.style.padding = '25px';
        card.style.display = 'flex';
        card.style.flexDirection = 'column';
        card.style.position = 'relative';
        card.style.border = recommended ? '2px solid var(--primary-color)' : '1px solid var(--border-color)';
        
        // Recommended badge
        if (recommended) {
            const badge = document.createElement('div');
            badge.textContent = 'RECOMMENDED';
            badge.style.position = 'absolute';
            badge.style.top = '-12px';
            badge.style.left = '50%';
            badge.style.transform = 'translateX(-50%)';
            badge.style.backgroundColor = 'var(--primary-color)';
            badge.style.color = 'white';
            badge.style.fontSize = '11px';
            badge.style.fontWeight = 'bold';
            badge.style.padding = '4px 10px';
            badge.style.borderRadius = '12px';
            badge.style.letterSpacing = '0.5px';
            card.appendChild(badge);
        }
        
        // Title
        const planTitle = document.createElement('h3');
        planTitle.textContent = title;
        planTitle.style.fontSize = '20px';
        planTitle.style.margin = '0 0 15px 0';
        planTitle.style.textAlign = 'center';
        
        // Price
        const planPrice = document.createElement('div');
        planPrice.style.fontSize = '36px';
        planPrice.style.fontWeight = '500';
        planPrice.style.marginBottom = '5px';
        planPrice.style.textAlign = 'center';
        planPrice.textContent = price;
        
        const planPeriod = document.createElement('div');
        planPeriod.style.fontSize = '14px';
        planPeriod.style.color = 'var(--text-secondary)';
        planPeriod.style.marginBottom = '25px';
        planPeriod.style.textAlign = 'center';
        planPeriod.textContent = price === 'Free' ? '' : 'per month';
        
        // Features list
        const featuresList = document.createElement('ul');
        featuresList.style.listStyleType = 'none';
        featuresList.style.padding = '0';
        featuresList.style.margin = '0 0 30px 0';
        featuresList.style.flex = '1';
        
        features.forEach(feature => {
            const featureItem = document.createElement('li');
            featureItem.style.display = 'flex';
            featureItem.style.alignItems = 'center';
            featureItem.style.marginBottom = '15px';
            featureItem.style.color = 'var(--text-color)';
            featureItem.style.fontSize = '14px';
            
            // Checkmark icon
            const checkmark = document.createElement('span');
            checkmark.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>`;
            checkmark.style.color = 'var(--success-green)';
            checkmark.style.marginRight = '10px';
            checkmark.style.display = 'flex';
            checkmark.style.alignItems = 'center';
            
            featureItem.appendChild(checkmark);
            featureItem.appendChild(document.createTextNode(feature));
            featuresList.appendChild(featureItem);
        });
        
        // Button
        const planButton = document.createElement('button');
        planButton.textContent = buttonText;
        planButton.style.padding = '12px 20px';
        planButton.style.backgroundColor = recommended ? 'var(--button-blue)' : 'transparent';
        planButton.style.color = recommended ? 'white' : 'var(--text-color)';
        planButton.style.border = recommended ? 'none' : '1px solid var(--border-color)';
        planButton.style.borderRadius = '8px';
        planButton.style.cursor = 'pointer';
        planButton.style.fontSize = '15px';
        planButton.style.fontWeight = '500';
        planButton.style.width = '100%';
        
        // Add click handler to button
        planButton.addEventListener('click', () => {
            showNotification(`${title} plan will be available soon!`, 'info');
        });
        
        // Assemble card
        card.appendChild(planTitle);
        card.appendChild(planPrice);
        card.appendChild(planPeriod);
        card.appendChild(featuresList);
        card.appendChild(planButton);
        
        return card;
    };
    
    // Create plan cards
    const freePlan = createPlanCard(
        'Free',
        'Free',
        [
            'Limited to 2 books',
            'Basic collaboration features',
            'Community support',
            'Standard templates'
        ],
        false,
        'Current Plan'
    );
    
    const proPlan = createPlanCard(
        'Pro',
        '$9.99',
        [
            'Unlimited books',
            'Advanced collaboration',
            'Device syncing',
            'Priority support',
            'Custom templates'
        ],
        true,
        'Upgrade to Pro'
    );
    
    const teamPlan = createPlanCard(
        'Team',
        '$24.99',
        [
            'Everything in Pro',
            'Team management for up to 10 members',
            'Admin controls and permissions',
            'Custom branding options',
            'Advanced analytics'
        ],
        false,
        'Upgrade to Team'
    );
    
    plansContainer.appendChild(freePlan);
    plansContainer.appendChild(proPlan);
    plansContainer.appendChild(teamPlan);
    
    // Coming soon banner
    const comingSoonBanner = document.createElement('div');
    comingSoonBanner.style.marginTop = '30px';
    comingSoonBanner.style.padding = '15px 20px';
    comingSoonBanner.style.backgroundColor = 'rgba(255, 151, 68, 0.1)';
    comingSoonBanner.style.borderRadius = '8px';
    comingSoonBanner.style.border = '1px solid rgba(255, 151, 68, 0.3)';
    comingSoonBanner.style.display = 'flex';
    comingSoonBanner.style.alignItems = 'center';
    
    // Info icon
    const infoIcon = document.createElement('div');
    infoIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="16" x2="12" y2="12"></line>
        <line x1="12" y1="8" x2="12" y2="8"></line>
    </svg>`;
    infoIcon.style.color = 'var(--accent-color)';
    infoIcon.style.marginRight = '15px';
    
    // Banner text
    const bannerText = document.createElement('div');
    bannerText.style.flex = '1';
    bannerText.style.color = 'var(--text-color)';
    bannerText.innerHTML = '<strong>Coming Soon:</strong> Membership and team features are currently in development. Stay tuned for updates!';
    
    comingSoonBanner.appendChild(infoIcon);
    comingSoonBanner.appendChild(bannerText);
    
    // Assemble modal content
    modalContent.appendChild(plansContainer);
    modalContent.appendChild(comingSoonBanner);
    
    // Assemble modal
    modalContainer.appendChild(modalHeader);
    modalContainer.appendChild(modalContent);
    modalOverlay.appendChild(modalContainer);
    
    // Add to document
    document.body.appendChild(modalOverlay);
}

// Update setupEventListeners to include profile icon click handler
function setupProfileEventListeners() {
    const profileIcon = document.querySelector('.profile-icon');
    if (profileIcon) {
        profileIcon.addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent event from bubbling up
            toggleProfileMenu();
        });
    }
}

// Call setupProfileEventListeners when page loads
document.addEventListener('DOMContentLoaded', function() {
    setupProfileEventListeners();
});

// Function to show the Admin Dashboard
function showAdminPage() {
    if (!contentContainer || !contentTitle) {
        console.error("Content container or title element not found");
        return;
    }
    
    // Set page title
    contentTitle.textContent = "Admin Dashboard";
    
    // Clear main content
    contentContainer.innerHTML = '';
    
    // Create admin content
    const adminContent = document.createElement('div');
    adminContent.className = 'admin-content';
    adminContent.style.padding = '20px 0';
    
    // Admin Header
    const adminHeader = document.createElement('div');
    adminHeader.style.marginBottom = '30px';
    
    const adminTitle = document.createElement('h2');
    adminTitle.textContent = 'Admin Dashboard';
    adminTitle.style.fontSize = '24px';
    adminTitle.style.fontWeight = '500';
    adminTitle.style.marginBottom = '10px';
    
    const adminSubtitle = document.createElement('p');
    adminSubtitle.textContent = 'Manage your knowledge base, users, and subscription settings';
    adminSubtitle.style.color = 'var(--text-secondary)';
    adminSubtitle.style.fontSize = '15px';
    
    adminHeader.appendChild(adminTitle);
    adminHeader.appendChild(adminSubtitle);
    
    // Stats Overview section
    const statsSection = document.createElement('div');
    statsSection.className = 'admin-stats-section';
    statsSection.style.display = 'grid';
    statsSection.style.gridTemplateColumns = 'repeat(auto-fill, minmax(250px, 1fr))';
    statsSection.style.gap = '20px';
    statsSection.style.marginBottom = '30px';
    
    // Create stat cards
    const userStats = createAdminStatCard('Active Users', '24', 'users');
    const bookStats = createAdminStatCard('Total Books', '8', 'books');
    const articleStats = createAdminStatCard('Published Articles', '47', 'articles');
    const viewStats = createAdminStatCard('Monthly Views', '1,254', 'views');
    
    statsSection.appendChild(userStats);
    statsSection.appendChild(bookStats);
    statsSection.appendChild(articleStats);
    statsSection.appendChild(viewStats);
    
    // User Management section
    const userSection = document.createElement('div');
    userSection.className = 'admin-section';
    userSection.style.backgroundColor = 'var(--card-color)';
    userSection.style.borderRadius = 'var(--border-radius)';
    userSection.style.padding = '20px';
    userSection.style.marginBottom = '30px';
    userSection.style.border = '1px solid var(--border-color)';
    
    const userHeader = document.createElement('div');
    userHeader.style.display = 'flex';
    userHeader.style.justifyContent = 'space-between';
    userHeader.style.alignItems = 'center';
    userHeader.style.marginBottom = '20px';
    
    const userTitle = document.createElement('h3');
    userTitle.textContent = 'User Management';
    userTitle.style.fontSize = '18px';
    userTitle.style.fontWeight = '500';
    
    const addUserBtn = document.createElement('button');
    addUserBtn.className = 'btn btn-primary';
    addUserBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
            <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
            <circle cx="8.5" cy="7" r="4"></circle>
            <line x1="20" y1="8" x2="20" y2="14"></line>
            <line x1="23" y1="11" x2="17" y2="11"></line>
        </svg>
        Add User
    `;
    addUserBtn.style.display = 'flex';
    addUserBtn.style.alignItems = 'center';
    
    // Add event listener for the Add User button
    addUserBtn.addEventListener('click', function() {
        showNotification('User management coming soon!', 'info');
    });
    
    userHeader.appendChild(userTitle);
    userHeader.appendChild(addUserBtn);
    
    // User table
    const userTable = document.createElement('table');
    userTable.style.width = '100%';
    userTable.style.borderCollapse = 'collapse';
    
    // Table header
    const tableHeader = document.createElement('thead');
    tableHeader.innerHTML = `
        <tr>
            <th style="text-align: left; padding: 12px 15px; border-bottom: 1px solid var(--border-color); font-weight: 500; color: var(--text-secondary);">User</th>
            <th style="text-align: left; padding: 12px 15px; border-bottom: 1px solid var(--border-color); font-weight: 500; color: var(--text-secondary);">Role</th>
            <th style="text-align: left; padding: 12px 15px; border-bottom: 1px solid var(--border-color); font-weight: 500; color: var(--text-secondary);">Status</th>
            <th style="text-align: left; padding: 12px 15px; border-bottom: 1px solid var(--border-color); font-weight: 500; color: var(--text-secondary);">Last Active</th>
            <th style="text-align: right; padding: 12px 15px; border-bottom: 1px solid var(--border-color); font-weight: 500; color: var(--text-secondary);">Actions</th>
        </tr>
    `;
    
    // Table body with sample users
    const tableBody = document.createElement('tbody');
    
    // Sample users
    const users = [
        { name: 'John Smith', email: 'john@example.com', role: 'Admin', status: 'Active', lastActive: '2 hours ago' },
        { name: 'Jane Doe', email: 'jane@example.com', role: 'Editor', status: 'Active', lastActive: '1 day ago' },
        { name: 'Robert Johnson', email: 'robert@example.com', role: 'Viewer', status: 'Pending', lastActive: 'Never' },
        { name: 'Emma Wilson', email: 'emma@example.com', role: 'Editor', status: 'Active', lastActive: '3 days ago' }
    ];
    
    users.forEach(user => {
        const row = document.createElement('tr');
        
        // Status color
        let statusColor = 'var(--success-green)';
        let statusBg = 'rgba(80, 200, 120, 0.1)';
        
        if (user.status === 'Pending') {
            statusColor = 'var(--accent-color)';
            statusBg = 'rgba(255, 151, 68, 0.1)';
        }
        
        row.innerHTML = `
            <td style="padding: 15px; border-bottom: 1px solid var(--border-color);">
                <div style="display: flex; align-items: center;">
                    <div style="width: 36px; height: 36px; border-radius: 50%; background-color: var(--hover-color); display: flex; align-items: center; justify-content: center; margin-right: 10px; font-weight: 500; color: var(--text-color);">
                        ${user.name.charAt(0)}
                    </div>
                    <div>
                        <div style="font-weight: 500;">${user.name}</div>
                        <div style="font-size: 13px; color: var(--text-secondary);">${user.email}</div>
                    </div>
                </div>
            </td>
            <td style="padding: 15px; border-bottom: 1px solid var(--border-color);">${user.role}</td>
            <td style="padding: 15px; border-bottom: 1px solid var(--border-color);">
                <span style="display: inline-block; padding: 3px 10px; border-radius: 12px; font-size: 12px; background-color: ${statusBg}; color: ${statusColor};">${user.status}</span>
            </td>
            <td style="padding: 15px; border-bottom: 1px solid var(--border-color);">${user.lastActive}</td>
            <td style="padding: 15px; border-bottom: 1px solid var(--border-color); text-align: right;">
                <button class="tree-action-btn" title="Edit User">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 20h9"></path>
                        <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                    </svg>
                </button>
                <button class="tree-action-btn" title="Manage Permissions">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                    </svg>
                </button>
            </td>
        `;
        
        tableBody.appendChild(row);
    });
    
    userTable.appendChild(tableHeader);
    userTable.appendChild(tableBody);
    
    userSection.appendChild(userHeader);
    userSection.appendChild(userTable);
    
    // Subscription Management section
    const subscriptionSection = document.createElement('div');
    subscriptionSection.className = 'admin-section';
    subscriptionSection.style.backgroundColor = 'var(--card-color)';
    subscriptionSection.style.borderRadius = 'var(--border-radius)';
    subscriptionSection.style.padding = '20px';
    subscriptionSection.style.marginBottom = '30px';
    subscriptionSection.style.border = '1px solid var(--border-color)';
    
    const subHeader = document.createElement('div');
    subHeader.style.display = 'flex';
    subHeader.style.justifyContent = 'space-between';
    subHeader.style.alignItems = 'center';
    subHeader.style.marginBottom = '20px';
    
    const subTitle = document.createElement('h3');
    subTitle.textContent = 'Subscription Management';
    subTitle.style.fontSize = '18px';
    subTitle.style.fontWeight = '500';
    
    const upgradeBtn = document.createElement('button');
    upgradeBtn.className = 'btn btn-primary';
    upgradeBtn.textContent = 'Upgrade Plan';
    
    // Add event listener for the Upgrade Plan button
    upgradeBtn.addEventListener('click', function() {
        showMembershipModal();
    });
    
    subHeader.appendChild(subTitle);
    subHeader.appendChild(upgradeBtn);
    
    // Current plan info
    const planInfo = document.createElement('div');
    planInfo.style.backgroundColor = 'rgba(100, 197, 255, 0.05)';
    planInfo.style.borderRadius = 'var(--border-radius)';
    planInfo.style.padding = '20px';
    planInfo.style.marginBottom = '20px';
    planInfo.style.border = '1px solid rgba(100, 197, 255, 0.2)';
    
    planInfo.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
            <div>
                <div style="font-weight: 500; font-size: 16px; margin-bottom: 5px;">Current Plan: <span style="color: var(--primary-color);">Free Plan</span></div>
                <div style="color: var(--text-secondary); font-size: 14px;">2 of 2 books used</div>
            </div>
            <div style="background-color: var(--primary-color); color: white; padding: 6px 12px; border-radius: 20px; font-size: 13px; font-weight: 500;">
                Active
            </div>
        </div>
        <div style="background-color: var(--card-color); height: 8px; border-radius: 4px; overflow: hidden; margin-bottom: 10px;">
            <div style="background-color: var(--primary-color); width: 100%; height: 100%;"></div>
        </div>
        <div style="display: flex; justify-content: space-between; font-size: 13px; color: var(--text-secondary);">
            <span>Renews on June 1, 2025</span>
            <span>2/2 books</span>
        </div>
    `;
    
    subscriptionSection.appendChild(subHeader);
    subscriptionSection.appendChild(planInfo);
    
    // Assemble the admin content
    adminContent.appendChild(adminHeader);
    adminContent.appendChild(statsSection);
    adminContent.appendChild(userSection);
    adminContent.appendChild(subscriptionSection);
    
    // Add content to main container
    contentContainer.appendChild(adminContent);
}

// Helper function to create admin stat cards
// Helper function to create admin stat cards
function createAdminStatCard(title, value, type) {
    const card = document.createElement('div');
    card.style.backgroundColor = 'var(--card-color)';
    card.style.borderRadius = 'var(--border-radius)';
    card.style.padding = '20px';
    card.style.border = '1px solid var(--border-color)';
    
    // Choose icon based on type
    let iconSvg = '';
    let iconColor = '';
    
    switch(type) {
        case 'users':
            iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                <circle cx="9" cy="7" r="4"></circle>
                <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>`;
            iconColor = '#3b82f6';
            break;
        case 'books':
            iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
            </svg>`;
            iconColor = '#8b5cf6';
            break;
        case 'articles':
            iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10 9 9 9 8 9"></polyline>
            </svg>`;
            iconColor = '#ec4899';
            break;
        case 'views':
            iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                <circle cx="12" cy="12" r="3"></circle>
            </svg>`;
            iconColor = '#10b981';
            break;
    }
    
    card.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
            <div style="color: ${iconColor};">${iconSvg}</div>
            <div style="font-size: 12px; color: var(--text-secondary);">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline>
                    <polyline points="17 6 23 6 23 12"></polyline>
                </svg>
                12%
            </div>
        </div>
        <div style="font-size: 28px; font-weight: 600; margin-bottom: 5px;">${value}</div>
        <div style="color: var(--text-secondary); font-size: 14px;">${title}</div>
    `;
    
    return card;
} 
